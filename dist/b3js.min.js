var b3js=function(I){var g={};function C(A){if(g[A])return g[A].exports;var t=g[A]={i:A,l:!1,exports:{}};return I[A].call(t.exports,t,t.exports,C),t.l=!0,t.exports}return C.m=I,C.c=g,C.d=function(I,g,A){C.o(I,g)||Object.defineProperty(I,g,{configurable:!1,enumerable:!0,get:A})},C.r=function(I){Object.defineProperty(I,"__esModule",{value:!0})},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s="./src/index.js")}({"./node_modules/compute-iqr/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/compute-iqr/lib/index.js ***!
  \***********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("/**\n*\n*\tCOMPUTE: iqr\n*\n*\n*\tDESCRIPTION:\n*\t\t- Computes the interquartile range for an array of values.\n*\n*\n*\tNOTES:\n*\t\t[1]\n*\n*\n*\tTODO:\n*\t\t[1]\n*\n*\n*\tLICENSE:\n*\t\tMIT\n*\n*\tCopyright (c) 2014. Athan Reines.\n*\n*\n*\tAUTHOR:\n*\t\tAthan Reines. kgryte@gmail.com. 2014.\n*\n*/\n\n\n\n// MODULES //\n\nvar isObject = __webpack_require__( /*! validate.io-object */ \"./node_modules/validate.io-object/lib/index.js\" ),\n\tquantile = __webpack_require__( /*! compute-quantile */ \"./node_modules/compute-quantile/lib/index.js\" );\n\n\n// FUNCTIONS //\n\n/**\n* FUNCTION: ascending( a, b )\n*\tComparator function used to sort values in ascending order.\n*\n* @private\n* @param {Number} a\n* @param {Number} b\n* @returns {Number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n} // end FUNCTION ascending()\n\n\n// INTERQUARTILE RANGE //\n\n/**\n* FUNCTION: iqr( arr )\n*\tComputes the interquartile range for an array.\n*\n* @param {Array} arr - array of values\n* @returns {Number} interquartile range\n*/\nfunction iqr( arr, opts ) {\n\tif ( !Array.isArray( arr ) ) {\n\t\tthrow new TypeError( 'iqr()::invalid input argument. Must provide an array.' );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'iqr()::invalid input argument. Options should be an object.' );\n\t\t}\n\t} else {\n\t\topts = {\n\t\t\t'sorted': false\n\t\t};\n\t}\n\tif ( !opts.sorted ) {\n\t\tarr = arr.slice();\n\t\tarr.sort( ascending );\n\t\topts.sorted = true;\n\t}\n\treturn quantile( arr, 0.75, opts ) - quantile( arr, 0.25, opts );\n} // end FUNCTION iqr()\n\n\n// EXPORTS //\n\nmodule.exports = iqr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29tcHV0ZS1pcXIvbGliL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYjNqcy8uL25vZGVfbW9kdWxlcy9jb21wdXRlLWlxci9saWIvaW5kZXguanM/MDBhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbipcbipcdENPTVBVVEU6IGlxclxuKlxuKlxuKlx0REVTQ1JJUFRJT046XG4qXHRcdC0gQ29tcHV0ZXMgdGhlIGludGVycXVhcnRpbGUgcmFuZ2UgZm9yIGFuIGFycmF5IG9mIHZhbHVlcy5cbipcbipcbipcdE5PVEVTOlxuKlx0XHRbMV1cbipcbipcbipcdFRPRE86XG4qXHRcdFsxXVxuKlxuKlxuKlx0TElDRU5TRTpcbipcdFx0TUlUXG4qXG4qXHRDb3B5cmlnaHQgKGMpIDIwMTQuIEF0aGFuIFJlaW5lcy5cbipcbipcbipcdEFVVEhPUjpcbipcdFx0QXRoYW4gUmVpbmVzLiBrZ3J5dGVAZ21haWwuY29tLiAyMDE0LlxuKlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBNT0RVTEVTIC8vXG5cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoICd2YWxpZGF0ZS5pby1vYmplY3QnICksXG5cdHF1YW50aWxlID0gcmVxdWlyZSggJ2NvbXB1dGUtcXVhbnRpbGUnICk7XG5cblxuLy8gRlVOQ1RJT05TIC8vXG5cbi8qKlxuKiBGVU5DVElPTjogYXNjZW5kaW5nKCBhLCBiIClcbipcdENvbXBhcmF0b3IgZnVuY3Rpb24gdXNlZCB0byBzb3J0IHZhbHVlcyBpbiBhc2NlbmRpbmcgb3JkZXIuXG4qXG4qIEBwcml2YXRlXG4qIEBwYXJhbSB7TnVtYmVyfSBhXG4qIEBwYXJhbSB7TnVtYmVyfSBiXG4qIEByZXR1cm5zIHtOdW1iZXJ9IGRpZmZlcmVuY2UgYmV0d2VlbiBgYWAgYW5kIGBiYFxuKi9cbmZ1bmN0aW9uIGFzY2VuZGluZyggYSwgYiApIHtcblx0cmV0dXJuIGEgLSBiO1xufSAvLyBlbmQgRlVOQ1RJT04gYXNjZW5kaW5nKClcblxuXG4vLyBJTlRFUlFVQVJUSUxFIFJBTkdFIC8vXG5cbi8qKlxuKiBGVU5DVElPTjogaXFyKCBhcnIgKVxuKlx0Q29tcHV0ZXMgdGhlIGludGVycXVhcnRpbGUgcmFuZ2UgZm9yIGFuIGFycmF5LlxuKlxuKiBAcGFyYW0ge0FycmF5fSBhcnIgLSBhcnJheSBvZiB2YWx1ZXNcbiogQHJldHVybnMge051bWJlcn0gaW50ZXJxdWFydGlsZSByYW5nZVxuKi9cbmZ1bmN0aW9uIGlxciggYXJyLCBvcHRzICkge1xuXHRpZiAoICFBcnJheS5pc0FycmF5KCBhcnIgKSApIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnaXFyKCk6OmludmFsaWQgaW5wdXQgYXJndW1lbnQuIE11c3QgcHJvdmlkZSBhbiBhcnJheS4nICk7XG5cdH1cblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcblx0XHRpZiAoICFpc09iamVjdCggb3B0cyApICkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggJ2lxcigpOjppbnZhbGlkIGlucHV0IGFyZ3VtZW50LiBPcHRpb25zIHNob3VsZCBiZSBhbiBvYmplY3QuJyApO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRvcHRzID0ge1xuXHRcdFx0J3NvcnRlZCc6IGZhbHNlXG5cdFx0fTtcblx0fVxuXHRpZiAoICFvcHRzLnNvcnRlZCApIHtcblx0XHRhcnIgPSBhcnIuc2xpY2UoKTtcblx0XHRhcnIuc29ydCggYXNjZW5kaW5nICk7XG5cdFx0b3B0cy5zb3J0ZWQgPSB0cnVlO1xuXHR9XG5cdHJldHVybiBxdWFudGlsZSggYXJyLCAwLjc1LCBvcHRzICkgLSBxdWFudGlsZSggYXJyLCAwLjI1LCBvcHRzICk7XG59IC8vIGVuZCBGVU5DVElPTiBpcXIoKVxuXG5cbi8vIEVYUE9SVFMgLy9cblxubW9kdWxlLmV4cG9ydHMgPSBpcXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/compute-iqr/lib/index.js\n")},"./node_modules/compute-quantile/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/compute-quantile/lib/index.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("/**\n*\n*\tCOMPUTE: quantile\n*\n*\n*\tDESCRIPTION:\n*\t\t- Computes a quantile for a numeric array.\n*\n*\n*\tNOTES:\n*\t\t[1]\n*\n*\n*\tTODO:\n*\t\t[1]\n*\n*\n*\tLICENSE:\n*\t\tMIT\n*\n*\tCopyright (c) 2014. Athan Reines.\n*\n*\n*\tAUTHOR:\n*\t\tAthan Reines. kgryte@gmail.com. 2014.\n*\n*/\n\n\n\n// MODULES //\n\nvar isObject = __webpack_require__( /*! validate.io-object */ \"./node_modules/validate.io-object/lib/index.js\" );\n\n\n// FUNCTIONS //\n\n/**\n* FUNCTION: ascending( a, b )\n*\tComparator function used to sort values in ascending order.\n*\n* @private\n* @param {Number} a\n* @param {Number} b\n* @returns {Number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n} // end FUNCTION ascending()\n\n\n// QUANTILE //\n\n/**\n* FUNCTION: quantile( arr, prob[, opts] )\n*\tComputes a quantile for a numeric array.\n*\n* @private\n* @param {Array} arr - 1d array\n* @param {Number} prob - quantile prob [0,1]\n* @param {Object} [opts] - method options:\n\t`method`: method used to interpolate a quantile value\n\t`sorted`: boolean flag indicating if the input array is sorted\n* @returns {Number} quantile value\n*/\nfunction quantile( arr, p, opts ) {\n\tif ( !Array.isArray( arr ) ) {\n\t\tthrow new TypeError( 'quantile()::invalid input argument. First argument must be an array.' );\n\t}\n\tif ( typeof p !== 'number' || p !== p ) {\n\t\tthrow new TypeError( 'quantile()::invalid input argument. Quantile probability must be numeric.' );\n\t}\n\tif ( p < 0 || p > 1 ) {\n\t\tthrow new TypeError( 'quantile()::invalid input argument. Quantile probability must be on the interval [0,1].' );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'quantile()::invalid input argument. Options must be an object.' );\n\t\t}\n\t\tif ( opts.hasOwnProperty( 'sorted' ) && typeof opts.sorted !== 'boolean' ) {\n\t\t\tthrow new TypeError( 'quantile()::invalid input argument. Sorted flag must be a boolean.' );\n\t\t}\n\t\tif ( opts.hasOwnProperty( 'method' ) && typeof opts.method !== 'string' ) {\n\t\t\tthrow new TypeError( 'quantile()::invalid input argument. Method must be a string.' );\n\t\t}\n\t\t// TODO: validate that the requested method is supported. list.indexOf( method )\n\t} else {\n\t\topts = {};\n\t}\n\tvar len = arr.length,\n\t\tid;\n\n\tif ( !opts.sorted ) {\n\t\tarr = arr.slice();\n\t\tarr.sort( ascending );\n\t}\n\n\t// Cases...\n\n\t// [0] 0th percentile is the minimum value...\n\tif ( p === 0.0 ) {\n\t\treturn arr[ 0 ];\n\t}\n\t// [1] 100th percentile is the maximum value...\n\tif ( p === 1.0 ) {\n\t\treturn arr[ len-1 ];\n\t}\n\t// Calculate the vector index marking the quantile:\n\tid = ( len*p ) - 1;\n\n\t// [2] Is the index an integer?\n\tif ( id === Math.floor( id ) ) {\n\t\t// Value is the average between the value at id and id+1:\n\t\treturn ( arr[ id ] + arr[ id+1 ] ) / 2.0;\n\t}\n\t// [3] Round up to the next index:\n\tid = Math.ceil( id );\n\treturn arr[ id ];\n} // end FUNCTION quantile()\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29tcHV0ZS1xdWFudGlsZS9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iM2pzLy4vbm9kZV9tb2R1bGVzL2NvbXB1dGUtcXVhbnRpbGUvbGliL2luZGV4LmpzP2FhZjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qXG4qXHRDT01QVVRFOiBxdWFudGlsZVxuKlxuKlxuKlx0REVTQ1JJUFRJT046XG4qXHRcdC0gQ29tcHV0ZXMgYSBxdWFudGlsZSBmb3IgYSBudW1lcmljIGFycmF5LlxuKlxuKlxuKlx0Tk9URVM6XG4qXHRcdFsxXVxuKlxuKlxuKlx0VE9ETzpcbipcdFx0WzFdXG4qXG4qXG4qXHRMSUNFTlNFOlxuKlx0XHRNSVRcbipcbipcdENvcHlyaWdodCAoYykgMjAxNC4gQXRoYW4gUmVpbmVzLlxuKlxuKlxuKlx0QVVUSE9SOlxuKlx0XHRBdGhhbiBSZWluZXMuIGtncnl0ZUBnbWFpbC5jb20uIDIwMTQuXG4qXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIE1PRFVMRVMgLy9cblxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSggJ3ZhbGlkYXRlLmlvLW9iamVjdCcgKTtcblxuXG4vLyBGVU5DVElPTlMgLy9cblxuLyoqXG4qIEZVTkNUSU9OOiBhc2NlbmRpbmcoIGEsIGIgKVxuKlx0Q29tcGFyYXRvciBmdW5jdGlvbiB1c2VkIHRvIHNvcnQgdmFsdWVzIGluIGFzY2VuZGluZyBvcmRlci5cbipcbiogQHByaXZhdGVcbiogQHBhcmFtIHtOdW1iZXJ9IGFcbiogQHBhcmFtIHtOdW1iZXJ9IGJcbiogQHJldHVybnMge051bWJlcn0gZGlmZmVyZW5jZSBiZXR3ZWVuIGBhYCBhbmQgYGJgXG4qL1xuZnVuY3Rpb24gYXNjZW5kaW5nKCBhLCBiICkge1xuXHRyZXR1cm4gYSAtIGI7XG59IC8vIGVuZCBGVU5DVElPTiBhc2NlbmRpbmcoKVxuXG5cbi8vIFFVQU5USUxFIC8vXG5cbi8qKlxuKiBGVU5DVElPTjogcXVhbnRpbGUoIGFyciwgcHJvYlssIG9wdHNdIClcbipcdENvbXB1dGVzIGEgcXVhbnRpbGUgZm9yIGEgbnVtZXJpYyBhcnJheS5cbipcbiogQHByaXZhdGVcbiogQHBhcmFtIHtBcnJheX0gYXJyIC0gMWQgYXJyYXlcbiogQHBhcmFtIHtOdW1iZXJ9IHByb2IgLSBxdWFudGlsZSBwcm9iIFswLDFdXG4qIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBtZXRob2Qgb3B0aW9uczpcblx0YG1ldGhvZGA6IG1ldGhvZCB1c2VkIHRvIGludGVycG9sYXRlIGEgcXVhbnRpbGUgdmFsdWVcblx0YHNvcnRlZGA6IGJvb2xlYW4gZmxhZyBpbmRpY2F0aW5nIGlmIHRoZSBpbnB1dCBhcnJheSBpcyBzb3J0ZWRcbiogQHJldHVybnMge051bWJlcn0gcXVhbnRpbGUgdmFsdWVcbiovXG5mdW5jdGlvbiBxdWFudGlsZSggYXJyLCBwLCBvcHRzICkge1xuXHRpZiAoICFBcnJheS5pc0FycmF5KCBhcnIgKSApIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAncXVhbnRpbGUoKTo6aW52YWxpZCBpbnB1dCBhcmd1bWVudC4gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhbiBhcnJheS4nICk7XG5cdH1cblx0aWYgKCB0eXBlb2YgcCAhPT0gJ251bWJlcicgfHwgcCAhPT0gcCApIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAncXVhbnRpbGUoKTo6aW52YWxpZCBpbnB1dCBhcmd1bWVudC4gUXVhbnRpbGUgcHJvYmFiaWxpdHkgbXVzdCBiZSBudW1lcmljLicgKTtcblx0fVxuXHRpZiAoIHAgPCAwIHx8IHAgPiAxICkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdxdWFudGlsZSgpOjppbnZhbGlkIGlucHV0IGFyZ3VtZW50LiBRdWFudGlsZSBwcm9iYWJpbGl0eSBtdXN0IGJlIG9uIHRoZSBpbnRlcnZhbCBbMCwxXS4nICk7XG5cdH1cblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMiApIHtcblx0XHRpZiAoICFpc09iamVjdCggb3B0cyApICkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggJ3F1YW50aWxlKCk6OmludmFsaWQgaW5wdXQgYXJndW1lbnQuIE9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QuJyApO1xuXHRcdH1cblx0XHRpZiAoIG9wdHMuaGFzT3duUHJvcGVydHkoICdzb3J0ZWQnICkgJiYgdHlwZW9mIG9wdHMuc29ydGVkICE9PSAnYm9vbGVhbicgKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAncXVhbnRpbGUoKTo6aW52YWxpZCBpbnB1dCBhcmd1bWVudC4gU29ydGVkIGZsYWcgbXVzdCBiZSBhIGJvb2xlYW4uJyApO1xuXHRcdH1cblx0XHRpZiAoIG9wdHMuaGFzT3duUHJvcGVydHkoICdtZXRob2QnICkgJiYgdHlwZW9mIG9wdHMubWV0aG9kICE9PSAnc3RyaW5nJyApIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdxdWFudGlsZSgpOjppbnZhbGlkIGlucHV0IGFyZ3VtZW50LiBNZXRob2QgbXVzdCBiZSBhIHN0cmluZy4nICk7XG5cdFx0fVxuXHRcdC8vIFRPRE86IHZhbGlkYXRlIHRoYXQgdGhlIHJlcXVlc3RlZCBtZXRob2QgaXMgc3VwcG9ydGVkLiBsaXN0LmluZGV4T2YoIG1ldGhvZCApXG5cdH0gZWxzZSB7XG5cdFx0b3B0cyA9IHt9O1xuXHR9XG5cdHZhciBsZW4gPSBhcnIubGVuZ3RoLFxuXHRcdGlkO1xuXG5cdGlmICggIW9wdHMuc29ydGVkICkge1xuXHRcdGFyciA9IGFyci5zbGljZSgpO1xuXHRcdGFyci5zb3J0KCBhc2NlbmRpbmcgKTtcblx0fVxuXG5cdC8vIENhc2VzLi4uXG5cblx0Ly8gWzBdIDB0aCBwZXJjZW50aWxlIGlzIHRoZSBtaW5pbXVtIHZhbHVlLi4uXG5cdGlmICggcCA9PT0gMC4wICkge1xuXHRcdHJldHVybiBhcnJbIDAgXTtcblx0fVxuXHQvLyBbMV0gMTAwdGggcGVyY2VudGlsZSBpcyB0aGUgbWF4aW11bSB2YWx1ZS4uLlxuXHRpZiAoIHAgPT09IDEuMCApIHtcblx0XHRyZXR1cm4gYXJyWyBsZW4tMSBdO1xuXHR9XG5cdC8vIENhbGN1bGF0ZSB0aGUgdmVjdG9yIGluZGV4IG1hcmtpbmcgdGhlIHF1YW50aWxlOlxuXHRpZCA9ICggbGVuKnAgKSAtIDE7XG5cblx0Ly8gWzJdIElzIHRoZSBpbmRleCBhbiBpbnRlZ2VyP1xuXHRpZiAoIGlkID09PSBNYXRoLmZsb29yKCBpZCApICkge1xuXHRcdC8vIFZhbHVlIGlzIHRoZSBhdmVyYWdlIGJldHdlZW4gdGhlIHZhbHVlIGF0IGlkIGFuZCBpZCsxOlxuXHRcdHJldHVybiAoIGFyclsgaWQgXSArIGFyclsgaWQrMSBdICkgLyAyLjA7XG5cdH1cblx0Ly8gWzNdIFJvdW5kIHVwIHRvIHRoZSBuZXh0IGluZGV4OlxuXHRpZCA9IE1hdGguY2VpbCggaWQgKTtcblx0cmV0dXJuIGFyclsgaWQgXTtcbn0gLy8gZW5kIEZVTkNUSU9OIHF1YW50aWxlKClcblxuXG4vLyBFWFBPUlRTIC8vXG5cbm1vZHVsZS5leHBvcnRzID0gcXVhbnRpbGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/compute-quantile/lib/index.js\n")},"./node_modules/validate.io-array/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/validate.io-array/lib/index.js ***!
  \*****************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n* FUNCTION: isArray( value )\n*\tValidates if a value is an array.\n*\n* @param {*} value - value to be validated\n* @returns {Boolean} boolean indicating whether value is an array\n*/\nfunction isArray( value ) {\n\treturn Object.prototype.toString.call( value ) === '[object Array]';\n} // end FUNCTION isArray()\n\n// EXPORTS //\n\nmodule.exports = Array.isArray || isArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdmFsaWRhdGUuaW8tYXJyYXkvbGliL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYjNqcy8uL25vZGVfbW9kdWxlcy92YWxpZGF0ZS5pby1hcnJheS9saWIvaW5kZXguanM/NjMzNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuKiBGVU5DVElPTjogaXNBcnJheSggdmFsdWUgKVxuKlx0VmFsaWRhdGVzIGlmIGEgdmFsdWUgaXMgYW4gYXJyYXkuXG4qXG4qIEBwYXJhbSB7Kn0gdmFsdWUgLSB2YWx1ZSB0byBiZSB2YWxpZGF0ZWRcbiogQHJldHVybnMge0Jvb2xlYW59IGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHZhbHVlIGlzIGFuIGFycmF5XG4qL1xuZnVuY3Rpb24gaXNBcnJheSggdmFsdWUgKSB7XG5cdHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIHZhbHVlICkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59IC8vIGVuZCBGVU5DVElPTiBpc0FycmF5KClcblxuLy8gRVhQT1JUUyAvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgaXNBcnJheTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/validate.io-array/lib/index.js\n")},"./node_modules/validate.io-object/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/validate.io-object/lib/index.js ***!
  \******************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\n// MODULES //\n\nvar isArray = __webpack_require__( /*! validate.io-array */ \"./node_modules/validate.io-array/lib/index.js\" );\n\n\n// ISOBJECT //\n\n/**\n* FUNCTION: isObject( value )\n*\tValidates if a value is a object; e.g., {}.\n*\n* @param {*} value - value to be validated\n* @returns {Boolean} boolean indicating whether value is a object\n*/\nfunction isObject( value ) {\n\treturn ( typeof value === 'object' && value !== null && !isArray( value ) );\n} // end FUNCTION isObject()\n\n\n// EXPORTS //\n\nmodule.exports = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdmFsaWRhdGUuaW8tb2JqZWN0L2xpYi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2IzanMvLi9ub2RlX21vZHVsZXMvdmFsaWRhdGUuaW8tb2JqZWN0L2xpYi9pbmRleC5qcz8yMjlmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gTU9EVUxFUyAvL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoICd2YWxpZGF0ZS5pby1hcnJheScgKTtcblxuXG4vLyBJU09CSkVDVCAvL1xuXG4vKipcbiogRlVOQ1RJT046IGlzT2JqZWN0KCB2YWx1ZSApXG4qXHRWYWxpZGF0ZXMgaWYgYSB2YWx1ZSBpcyBhIG9iamVjdDsgZS5nLiwge30uXG4qXG4qIEBwYXJhbSB7Kn0gdmFsdWUgLSB2YWx1ZSB0byBiZSB2YWxpZGF0ZWRcbiogQHJldHVybnMge0Jvb2xlYW59IGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHZhbHVlIGlzIGEgb2JqZWN0XG4qL1xuZnVuY3Rpb24gaXNPYmplY3QoIHZhbHVlICkge1xuXHRyZXR1cm4gKCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFpc0FycmF5KCB2YWx1ZSApICk7XG59IC8vIGVuZCBGVU5DVElPTiBpc09iamVjdCgpXG5cblxuLy8gRVhQT1JUUyAvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/validate.io-object/lib/index.js\n")},"./src/Axes.js":
/*!*********************!*\
  !*** ./src/Axes.js ***!
  \*********************/
/*! exports provided: xaxis, yaxis */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xaxis", function() { return xaxis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yaxis", function() { return yaxis; });\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nfunction xaxis(selection, height, width, axisObject) {\n    selection.select(".x-axis").remove();\n    let axis = selection.append("g")\n                        .attr("class", "x-axis")\n                        .attr("transform", "translate(0," + height + ")")\n                        .style("opacity", 0)\n                        .call(axisObject);\n\n    axis.select(".domain").remove();\n\n    let max = 0;\n    const fontSize = 12;\n    axis.selectAll("text")\n        .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n        .nodes()\n        .forEach(text => max = Math.max(max, text.getBBox().width));\n\n    if (max >= width - 10) {\n        const bad = max >= width * 2;\n        const angle = bad ? -90 : -30;\n        const fontSize = width <= 13 ? 8 : 12;\n        const x = bad ? -fontSize : 0;\n        const y = bad ? 5 : 2;\n\n        axis.selectAll("text")\n            .style(\'text-anchor\', \'end\')\n            .style("font-size", fontSize + "px")\n            .attr("transform", () => "translate(" + x + "," + y + ") rotate(" + angle + " 0,0)")\n    }\n\n    axis\n        .transition()\n        .duration(1000)\n        .style("opacity", 1);\n\n    const axisHeight = axis.node().getBBox().height;\n    axis.attr("transform", "translate(0," + (height - axisHeight) + ")");\n    return axisHeight;\n}\n\nfunction yaxis(selection, axis) {\n    selection.select(".y-axis").remove();\n    let x = selection.append("g")\n                     .attr("class", "y-axis")\n                     .call(axis.tickSize(0).tickPadding(10))\n                     .style("opacity", 0)\n                     .transition()\n                     .duration(1000)\n                     .style("opacity", 1);\n\n    x.selectAll("text")\n     .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n    const width = x.node().getBBox().width;\n    x.attr("transform", "translate(" + width + ",0)");\n\n    return width;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQXhlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2IzanMvLi9zcmMvQXhlcy5qcz84ZTE3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoQykgMjAxMy0yMDE0LCAyMDE4IEJyYW5kc0V5ZSAoUFRZKSBMVERcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbi8vIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuLy8gd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuLy8gICAgIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbi8vIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4vLyBjb25kaXRpb25zOlxuLy9cbi8vICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vICAgICBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GXG4vLyBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkVcbi8vIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2NvbG91cnN9IGZyb20gXCIuL0NvbG91cnNcIjtcblxuXG5leHBvcnQgZnVuY3Rpb24geGF4aXMoc2VsZWN0aW9uLCBoZWlnaHQsIHdpZHRoLCBheGlzT2JqZWN0KSB7XG4gICAgc2VsZWN0aW9uLnNlbGVjdChcIi54LWF4aXNcIikucmVtb3ZlKCk7XG4gICAgbGV0IGF4aXMgPSBzZWxlY3Rpb24uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIngtYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoYXhpc09iamVjdCk7XG5cbiAgICBheGlzLnNlbGVjdChcIi5kb21haW5cIikucmVtb3ZlKCk7XG5cbiAgICBsZXQgbWF4ID0gMDtcbiAgICBjb25zdCBmb250U2l6ZSA9IDEyO1xuICAgIGF4aXMuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGNvbG91cnMuZWlnaHRlZW4uZGFya0dyZXkpXG4gICAgICAgIC5ub2RlcygpXG4gICAgICAgIC5mb3JFYWNoKHRleHQgPT4gbWF4ID0gTWF0aC5tYXgobWF4LCB0ZXh0LmdldEJCb3goKS53aWR0aCkpO1xuXG4gICAgaWYgKG1heCA+PSB3aWR0aCAtIDEwKSB7XG4gICAgICAgIGNvbnN0IGJhZCA9IG1heCA+PSB3aWR0aCAqIDI7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gYmFkID8gLTkwIDogLTMwO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IHdpZHRoIDw9IDEzID8gOCA6IDEyO1xuICAgICAgICBjb25zdCB4ID0gYmFkID8gLWZvbnRTaXplIDogMDtcbiAgICAgICAgY29uc3QgeSA9IGJhZCA/IDUgOiAyO1xuXG4gICAgICAgIGF4aXMuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdlbmQnKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIGZvbnRTaXplICsgXCJweFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKCkgPT4gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsXCIgKyB5ICsgXCIpIHJvdGF0ZShcIiArIGFuZ2xlICsgXCIgMCwwKVwiKVxuICAgIH1cblxuICAgIGF4aXNcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxKTtcblxuICAgIGNvbnN0IGF4aXNIZWlnaHQgPSBheGlzLm5vZGUoKS5nZXRCQm94KCkuaGVpZ2h0O1xuICAgIGF4aXMuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgKGhlaWdodCAtIGF4aXNIZWlnaHQpICsgXCIpXCIpO1xuICAgIHJldHVybiBheGlzSGVpZ2h0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24geWF4aXMoc2VsZWN0aW9uLCBheGlzKSB7XG4gICAgc2VsZWN0aW9uLnNlbGVjdChcIi55LWF4aXNcIikucmVtb3ZlKCk7XG4gICAgbGV0IHggPSBzZWxlY3Rpb24uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInktYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAgLmNhbGwoYXhpcy50aWNrU2l6ZSgwKS50aWNrUGFkZGluZygxMCkpXG4gICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG4gICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XG5cbiAgICB4LnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgLnN0eWxlKFwiZmlsbFwiLCBjb2xvdXJzLmVpZ2h0ZWVuLmRhcmtHcmV5KTtcblxuICAgIGNvbnN0IHdpZHRoID0geC5ub2RlKCkuZ2V0QkJveCgpLndpZHRoO1xuICAgIHguYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHdpZHRoICsgXCIsMClcIik7XG5cbiAgICByZXR1cm4gd2lkdGg7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Axes.js\n')},"./src/BarChart.js":
/*!*************************!*\
  !*** ./src/BarChart.js ***!
  \*************************/
/*! exports provided: BarChart */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BarChart", function() { return BarChart; });\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./src/helpers.js");\n/* harmony import */ var _Chart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chart */ "./src/Chart.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\nclass BarChart extends _Chart__WEBPACK_IMPORTED_MODULE_2__["Chart"] {\n\n    //------------------------------------------------------\n\n    data(data) {\n        if (!arguments.length) return this._data;\n        if (data && data[0].key === undefined) {\n            data = [\n                {\n                    key: "series 1",\n                    values: data\n                }\n            ];\n        }\n        this._data = data;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    element(element) {\n        if (!arguments.length) return this._element;\n        this._element = element;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    showLabels(show) {\n        if (!arguments.length) return this._show_labels;\n        this._show_labels = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo dispatch\n    showLegend(show) {\n        if (!arguments.length) return this._show_legend;\n        this._show_legend = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    x(x) {\n        if (!arguments.length) return this._x;\n        this._x = x;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    y(y) {\n        if (!arguments.length) return this._y;\n        this._y = y;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    width(width) {\n        if (!arguments.length) return this._width;\n        this._width = width;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    height(height) {\n        if (!arguments.length) return this._height;\n        this._height = height;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    colours(colours) {\n        if (!arguments.length) return this._colours;\n        this._colours = colours;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    backgroundColour(colour) {\n        if (!arguments.length) return this._backgroundColour;\n        this._backgroundColour = colour || "#FFF"; // never set it to null.\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tickFormat(format) {\n        if (!arguments.length) return this._tickFormat;\n        this._tickFormat = format;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    xAxisTickFormat(format) {\n        if (!arguments.length) return this._xAxisTickFormat;\n        this._xAxisTickFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    labelFormat(format) {\n        if (!arguments.length) return this._labelFormat;\n        this._labelFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo missing\n    labelCompression(compression) {\n        if (!arguments.length) return this._compression;\n        this._compression = compression;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    //todo missing\n    dataAxisLabel(label) {\n        if (!arguments.length) return this._dataAxisLabel;\n        this._dataAxisLabel = label;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tooltip(tooltip) {\n        if (!arguments.length) return this._tooltip;\n        this._tooltip = tooltip;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    forceY(force) {\n        if (!arguments.length) return this._forceY;\n        this._forceY = force;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n// todo missing\n    duration(duration) {\n        if (!arguments.length) return this._duration;\n        this._duration = duration;\n        return this;\n    }\n\n// todo missing\n    coarseness(coarseness) {\n        if (!arguments.length) return this._coarseness;\n        this._coarseness = coarseness;\n        return this;\n    }\n\n    // todo missing\n    padding(padding) {\n        if (!arguments.length) return this._padding;\n        this._padding = padding;\n        return this;\n    }\n\n    // todo missing\n    xAxisTooltips(tooltips) {\n        if (!arguments.length) return this._xAxisTooltips;\n        this._xAxisTooltips = tooltips;\n        return this;\n    }\n\n    xAxisOverride(override) {\n        if (!arguments.length) return this._xAxisOverride;\n        this._xAxisOverride = override;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    dispatch() {\n        return this._dispatch;\n    }\n\n    //------------------------------------------------------\n\n    render() {\n        if (!this._element) throw new Error("No element set for ColumnChart. See #element()");\n        if (!this._data) {\n            console.warn("No data set for ColumnChart. See #data()");\n            return;\n        }\n\n        const data = this.getTransformedData();\n        const keys = this.getKeys();\n\n        //------------------------------------------------\n        // Set up the SVG area\n\n        let topLevel = d3.select(this._element).select("svg");\n        if (topLevel.empty()) topLevel = d3.select(this._element).append("svg")\n\n        topLevel\n            .style("width", this._width + "px")\n            .style("height", this._height + "px");\n\n\n        // ---------------------------------\n        // Measure max data axis text length\n\n        const dataAxisBB = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["maxBounding"])(topLevel, data.map(d => this._xAxisTickFormat(d.key)));\n\n        // ---------------------------------\n        // Layout the showLegend.\n        //\n        // We do this now because we need to know how much space the legend\n        // takes up in order to finish calculating the margins.\n\n        const legendHeight = this.renderLegend();\n\n        //----------------------------------\n        // Calculate margins.\n\n        const margin = {top: 20, right: 20, bottom: 40, left: 10};\n        margin.bottom += legendHeight ? legendHeight + 20 : 0;\n        margin.left += dataAxisBB.width + 10;\n        if (this._dataAxisLabel) margin.bottom += 10 + 12;\n\n        const width = this._width - margin.left - margin.right,\n              height = this._height - margin.top - margin.bottom;\n\n        //----------------------------------\n        // Calculate scales and so on.\n\n        const x = d3.scaleLinear()\n            .rangeRound([0, width])\n            .nice();\n\n        const y = d3.scaleBand()\n            .rangeRound([0, height])\n            .padding(this._data.length > 1 ? 0.08 : 0.1);\n\n        const yGroup = d3.scaleBand()\n            .padding(0);\n\n        this._xscale = x;\n        this._ygroupscale = yGroup;\n        this._yscale = y;\n\n        // Scale the range of the data in the domains\n        y.domain(data.map(d => d.key));\n        yGroup.rangeRound([0, y.bandwidth()]).domain(keys);\n        x.domain([0, d3.max(data, d => d3.max(d.data, d => d._y))]);\n\n        //------------------------------\n\n        let svg = topLevel.select(\'.main-group\');\n\n        if (svg.empty()) {\n            svg = topLevel\n                .append("g")\n                .attr("class", "main-group")\n        }\n\n        svg.attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n        //---------------------------------\n        // Get rid of current labels.\n        svg.select(".chart-labels")\n            .remove();\n\n        //---------------------------------\n        // append the rectangles for the bar chart\n        let groups = svg.select(".bars").selectAll(\'.group\');\n\n        if (groups.empty()) {\n            groups = svg\n                .append("g")\n                .attr("class", "bars")\n                .selectAll(".group");\n        }\n\n        groups = groups.data(data);\n\n        groups.exit().remove();\n\n        // Adding new groups, and hence adding new bars to those groups.\n        groups.enter()\n            .append("g")\n                .attr("class", "group")\n                .attr("transform", d => "translate(0," + y(d.key) + ")")\n                .attr("height", height - y.bandwidth())\n                .attr("width", "100%")\n            .merge(groups)\n            .interrupt("groups:move")\n            .transition("groups:move")\n                .attr("transform", d => "translate(0," + y(d.key) + ")")\n                .attr("height", y.bandwidth())\n            .each((s_d, s_i, nodes) => {\n                let group = d3.select(nodes[s_i]);\n\n                let bars = group.selectAll(".bar")\n                    .data(s_d.data);\n\n                bars.exit().remove();\n\n                bars.interrupt("bar:move")     // Animate the bars to their new position.\n                    .transition("bar:move")\n                        .attr("height", yGroup.bandwidth())\n                        .attr("y", d => yGroup(d._key))\n                        .attr("x", 0);\n\n                bars.enter()\n                    .append("rect")\n                        .attr("class", (d, i) => "bar series series-" + i)\n                        .attr("y", d => yGroup(d._key))\n                        .attr("x", 0)\n                        .attr("height", yGroup.bandwidth())\n                        .attr("width", 0)\n                        .style("fill", (d, i) => this.getSeriesColour(i))\n                        .style("cursor", "pointer")\n                    .on("mouseover", (d, i, nodes) => { // Darken the bar on mouse over\n                        d3.select(nodes[i])\n                            .interrupt("hover:colour")\n                            .transition("hover:colour")\n                            .duration(400)\n                            .style("fill", d3.hcl(this.getSeriesColour(i)).darker())\n                        this._dispatch.call("tooltipShow", this, {\n                            e: d3.event,\n                            point: d,\n                            series: s_d,\n                            seriesIndex: s_i,\n                            value: d._y\n                        })\n                    })\n                    .on("mouseout", (d, i, nodes) => { // bar is regular colour on mouse out.\n                        d3.select(nodes[i])\n                            .interrupt("hover:colour")\n                            .transition("hover:colour")\n                            .duration(400)\n                            .style("fill", this.getSeriesColour(i));\n                        this._dispatch.call("tooltipHide", this);\n                    })\n                    .on("click auxclick", (d, i, nodes) => {\n                        this._dispatch.call("elementClick", this, {\n                            e: d3.event,\n                            point: d,\n                            series: d._series,\n                            seriesIndex: s_i,\n                            value: this._y(d)\n                        })\n                    })\n                    .merge(bars)\n                    .interrupt("bar:growth")    // Animate bars growing.\n                    .transition("bar:growth")\n                    .delay(() => {\n                        return this.calcBarGrowth(s_i, nodes.length);\n                    })\n                    .duration(this._duration)\n                        .style("fill", (d, i) => this.getSeriesColour(i))\n                        .attr("width", d => x(d._y));\n\n            });\n\n        // ---------------------------------\n        // Labels loaded after our first bar grows.\n        if (this._show_labels) {\n            svg.transition("bar:growth")\n                .on("end", (d, i, nodes) => {\n                    if (i < nodes.length - 1) return;\n                    this.renderLabels(svg, data, x, yGroup, y);\n                })\n        }\n\n        // ---------------------------------\n        // Draw the data axis data label.\n\n        if (this._dataAxisLabel) {\n            this.renderDataAxisLabel(width, margin);\n        }\n\n        // ---------------------------------\n        // Set the background colour\n\n        d3.select(this._element).select(".background").remove();\n        if (this._backgroundColour) {\n            d3.select(this._element).select("svg")\n                .append("rect")\n                    .attr("class", "background")\n                    .attr("width", "100%")\n                    .attr("height", "100%")\n                    .style("fill", this._backgroundColour)\n                .lower();\n        }\n\n        //---------------------------------\n        // add the Y gridlines\n        svg.call(this.grid, height, d3.axisBottom(x).ticks(5));\n\n        //---------------------------------\n        // axes\n        svg.call(this.labelAxis, d3.axisLeft(y).tickSize(0).tickPadding(5).tickFormat(this._xAxisTickFormat));\n        svg.call(this.dataAxis, height, d3.axisBottom(x).ticks(5).tickFormat(this._tickFormat));\n    }\n\n    //------------------------------------------------------\n\n    /*\n     * Returns an object with two functions, #show() and #hide(),\n     * to show and hide the labels.\n     */\n    labels() {\n        return {\n\n            show: () => {\n                if (this._element) {\n                    let selection = this._element,\n                        data = this.getTransformedData(),\n                        xscale = this._xscale,\n                        ygroup = this._ygroupscale,\n                        yscale = this._yscale;\n\n                    if (selection) selection = d3.select(this._element).select("svg").select("g");\n                    if (!selection.empty() && data && xscale && yscale && ygroup) {\n                        let labels = selection.select(\'.chart-labels\');\n                        if (!labels.empty()) return;\n                        labels.remove()\n                        this.renderLabels(selection, data, xscale, ygroup, yscale, false);\n                    }\n                }\n\n            },\n\n            hide: () => {\n                if (this._element) {\n                    d3.select(this._element)\n                        .select(\'.chart-labels\')\n                        .interrupt("labels")\n                        .interrupt("labels:fade")\n                        .transition("labels:fade")\n                        .style("opacity", 0)\n                        .on("end", (d, i, nodes) => {\n                            d3.select(nodes[i]).remove();\n                        })\n                }\n            }\n        }\n    }\n\n    //------------------------------------------------------\n\n    renderLabels(selection, data, xscale, ygroup, yscale, animate) {\n        animate = animate === undefined ? true : animate;\n        selection.selectAll(".chart-labels").remove();\n\n        let labels = selection.append("g")\n            .attr("class", "chart-labels")\n            .selectAll(".label-group")\n            .data(data);\n\n        let fontSize = 12;    // Our initial font size.\n        const buffer = 5;     // Buffer space between words and the top of a bar.\n\n        labels.enter().each((series, s_i, s_nodes) => {\n            let group = d3.select(s_nodes[s_i])\n                .append("g")\n                .attr("class", "label-group")\n                .attr("transform", d => "translate(0," + yscale(d.key) + ")")\n                .selectAll(".chart-label")\n                .data(series.data)\n                .enter()\n                .each((d, i, nodes) => {\n\n                    // Want to figure out if the label is too dark / light for the\n                    // bar.\n                    let invertedColor = d3.hcl(this.getSeriesColour(i));\n                    invertedColor.l += Math.min(invertedColor.l + 50, 100);\n                    let invert = d3.hcl(this.getSeriesColour(i)).l < 60;\n\n                    let xpos = xscale(d._y);\n\n                    let text = d3.select(nodes[i])\n                        .append("text")\n                        .text(this._labelFormat(d._y))\n                            .attr("class", "chart-label")\n                            .attr("x", xpos + buffer)\n                            .attr("dx", animate ? -15 : 0)\n                            .style("opacity", 0)\n                            .style("pointer-events", "none")\n                            .style("font-size", fontSize + "px");\n\n\n                    const bb = text.node().getBBox();\n                    const oversize = xpos + bb.width + buffer > xscale.range()[1];\n\n                    text\n                        .attr("y", ygroup(d._key) + fontSize / 2 + ygroup.bandwidth() / 2)\n                        .attr("x", oversize ? xpos - buffer - bb.width : xpos + buffer)\n                        .style("fill", oversize && invert ? invertedColor.toString() : _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n                    text\n                        .transition("labels")\n                        .delay(() => animate ? this.calcBarGrowth(s_i, s_nodes.length) : 0) // Delay in lockstep with bar growth.\n                        .duration(this._duration)\n                        .attr("dx", 0)\n                        .style("opacity", 1)\n                })\n        });\n\n    }\n\n    //------------------------------------------------------\n\n    renderDataAxisLabel(width, margins) {\n        let svg = d3.select(this._element).select(\'svg\');\n        svg.selectAll(".data-labels").remove();\n\n        if (!this._dataAxisLabel) return;\n        let text = this._dataAxisLabel;\n        if (text.long) text = text.long;\n\n        let x = (margins.left + width / 2);\n\n        let label = svg.append("g")\n            .attr("class", "data-labels")\n            .append("text")\n            .text(text)\n            .attr("transform", "translate(" + x + "," + (this._height - margins.bottom + 50) + ")")\n            .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n        let textWidth = label.node().getBBox().width;\n        if (textWidth >= width && this._dataAxisLabel.short) {\n            label.text(this._dataAxisLabel.short);\n            textWidth = label.node().getBBox().width;\n        }\n\n        label.attr("dx", -textWidth / 2);\n    }\n\n    //------------------------------------------------------\n\n\n\n    grid(selection, height, axis) {\n        selection.select(".grid").remove();\n\n        let grid = selection.append("g")\n            .attr("class", "grid")\n            .call(axis\n                .tickSize(height)\n                .tickFormat("")\n            );\n\n        grid.selectAll("line")\n            .style("stroke", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.lightGrey);\n        grid.selectAll(".domain").remove();\n\n        grid\n            .lower() // Always ensure that this is earlier in the dom. Things must be drawn on top of it.\n            .style("opacity", 0)\n            .transition()\n            .delay(500)\n            .duration(500)\n            .style("opacity", 1);\n    }\n\n    //------------------------------------------------------\n\n    labelAxis(selection, axis_object) {\n        selection.select(".label-axis").remove();\n        let axis = selection.append("g")\n            .attr("class", "label-axis")\n            .style("opacity", 0)\n            .call(axis_object);\n\n        axis.select(".domain").remove();\n\n        let max = 0;\n        const fontSize = 12;\n        axis.selectAll("text")\n            .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n            .nodes()\n            .forEach(text => max = Math.max(max, text.getBBox().width));\n\n        axis\n            .transition()\n            .duration(1000)\n            .style("opacity", 1);\n    }\n\n    //------------------------------------------------------\n\n    dataAxis(selection, height, axis_object) {\n        selection.select(".data-axis").remove();\n        let axis = selection.append("g")\n                .attr("class", "data-axis")\n                .attr("transform", "translate(0," + height + ")")\n            .call(axis_object.tickSize(0).tickPadding(10))\n                .style("opacity", 0)\n            .transition()\n            .duration(1000)\n                .style("opacity", 1);\n\n        axis.selectAll("text")\n                .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n    }\n\n    //------------------------------------------------------\n\n    calcBarGrowth(i, max) {\n        if (max < 10) return i * this._BAR_GROWTH / 2;\n        if (max < 35) return i * this._BAR_GROWTH / 4;\n        return 1;\n    }\n\n    getSeriesColour(i) {\n        if (i < 0 || !this._colours) return _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.midGrey;\n\n        i = i % this._colours.length;\n        return this._colours[i];\n    }\n\n    getSortedData() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        data = this._data.sort((lhs, rhs) => {\n            lhs = lhs.key.toLowerCase();\n            rhs = rhs.key.toLowerCase();\n\n            if (lhs === rhs) return 0;\n            if (lhs < rhs) return -1;\n            return 1;\n        });\n\n        return data;\n    }\n\n    getTransformedData() {\n        let data = this.getSortedData();\n        if (!data || !data.length) return [];\n\n        let results = [];\n\n        const getX = d => this._xAxisOverride ? this._xAxisOverride[this._x(d)] : this._x(d);\n\n        data.forEach((series, s_i) => {\n            series.values.forEach((d, d_i) => {\n                let field = results.find(bucket => bucket.key === getX(d));\n                if (!field) {\n                    field = {\n                        data: [],\n                        key: getX(d)\n                    };\n                    results.push(field);\n                }\n\n                field.data.push(Object.assign({\n                    _series: series,\n                    _s_i: s_i,\n                    _key: series.key,\n                    _y: this._y(d)\n                }, d));\n            })\n        });\n\n        return results;\n    }\n\n    getKeys() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        return [...new Set(data.map(d => d.key))]\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/BarChart.js\n')},"./src/Bucket.js":
/*!***********************!*\
  !*** ./src/Bucket.js ***!
  \***********************/
/*! exports provided: DateBucket, ContinuousBucket */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateBucket", function() { return DateBucket; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContinuousBucket", function() { return ContinuousBucket; });\n/* harmony import */ var _Statistics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Statistics */ "./src/Statistics.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/**\n * The bucket of a Date object is just itself. We assume that\n * dates are their own buckets.\n */\nclass DateBucket {\n    constructor(data) {\n\n    }\n\n    // A noop: each date is its own bucket.\n    bucket(d) {\n        return d;\n    }\n\n    // A noop: our buckets are already consolidated.\n    consolidateBuckets(data) {\n        return data;\n    }\n}\n\n\nclass ContinuousBucket {\n    // We calculate buckets based on the Freedman-Draconis\n    // inter-quartile range method.\n    constructor(data) {\n        this._bucketWidth = Object(_Statistics__WEBPACK_IMPORTED_MODULE_0__["freedmanDiaconis"])(data);\n    }\n\n    bucket(d) {\n        const b = Math.floor(d / this._bucketWidth);\n        return Math.ceil(b * this._bucketWidth + this._bucketWidth);\n    }\n\n    consolidateBuckets(data) {\n        data.forEach(bucket => {\n            const counts = {};\n            const examples = {};\n            // Count everything grouped by their keys\n            // (i.e. count individual series\n            bucket.data.forEach(d => {\n                counts[d._key] = (counts[d._key] || 0) + 1;\n                examples[d._key] = d;\n            });\n            // Provide one summary per series, but preserve\n            // any extra data, such as colour and so on.\n            bucket.data = Object.keys(counts).map(key => {\n                const example = examples[key];\n                return Object.assign({}, example, {\n                    _y: counts[key]\n                })\n            })\n        });\n\n        return data;\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQnVja2V0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYjNqcy8uL3NyYy9CdWNrZXQuanM/ZTU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKEMpIDIwMTMtMjAxNCwgMjAxOCBCcmFuZHNFeWUgKFBUWSkgTFREXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4vLyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcbi8vIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSxcbi8vICAgICBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4vLyBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuLy8gY29uZGl0aW9uczpcbi8vXG4vLyAgICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vICAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsXG4vLyAgICAgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRlxuLy8gQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFXG4vLyBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtmcmVlZG1hbkRpYWNvbmlzfSBmcm9tIFwiLi9TdGF0aXN0aWNzXCI7XG5cbi8qKlxuICogVGhlIGJ1Y2tldCBvZiBhIERhdGUgb2JqZWN0IGlzIGp1c3QgaXRzZWxmLiBXZSBhc3N1bWUgdGhhdFxuICogZGF0ZXMgYXJlIHRoZWlyIG93biBidWNrZXRzLlxuICovXG5leHBvcnQgY2xhc3MgRGF0ZUJ1Y2tldCB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuXG4gICAgfVxuXG4gICAgLy8gQSBub29wOiBlYWNoIGRhdGUgaXMgaXRzIG93biBidWNrZXQuXG4gICAgYnVja2V0KGQpIHtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuXG4gICAgLy8gQSBub29wOiBvdXIgYnVja2V0cyBhcmUgYWxyZWFkeSBjb25zb2xpZGF0ZWQuXG4gICAgY29uc29saWRhdGVCdWNrZXRzKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBDb250aW51b3VzQnVja2V0IHtcbiAgICAvLyBXZSBjYWxjdWxhdGUgYnVja2V0cyBiYXNlZCBvbiB0aGUgRnJlZWRtYW4tRHJhY29uaXNcbiAgICAvLyBpbnRlci1xdWFydGlsZSByYW5nZSBtZXRob2QuXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICB0aGlzLl9idWNrZXRXaWR0aCA9IGZyZWVkbWFuRGlhY29uaXMoZGF0YSk7XG4gICAgfVxuXG4gICAgYnVja2V0KGQpIHtcbiAgICAgICAgY29uc3QgYiA9IE1hdGguZmxvb3IoZCAvIHRoaXMuX2J1Y2tldFdpZHRoKTtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChiICogdGhpcy5fYnVja2V0V2lkdGggKyB0aGlzLl9idWNrZXRXaWR0aCk7XG4gICAgfVxuXG4gICAgY29uc29saWRhdGVCdWNrZXRzKGRhdGEpIHtcbiAgICAgICAgZGF0YS5mb3JFYWNoKGJ1Y2tldCA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb3VudHMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGV4YW1wbGVzID0ge307XG4gICAgICAgICAgICAvLyBDb3VudCBldmVyeXRoaW5nIGdyb3VwZWQgYnkgdGhlaXIga2V5c1xuICAgICAgICAgICAgLy8gKGkuZS4gY291bnQgaW5kaXZpZHVhbCBzZXJpZXNcbiAgICAgICAgICAgIGJ1Y2tldC5kYXRhLmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICAgICAgY291bnRzW2QuX2tleV0gPSAoY291bnRzW2QuX2tleV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgICAgIGV4YW1wbGVzW2QuX2tleV0gPSBkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBQcm92aWRlIG9uZSBzdW1tYXJ5IHBlciBzZXJpZXMsIGJ1dCBwcmVzZXJ2ZVxuICAgICAgICAgICAgLy8gYW55IGV4dHJhIGRhdGEsIHN1Y2ggYXMgY29sb3VyIGFuZCBzbyBvbi5cbiAgICAgICAgICAgIGJ1Y2tldC5kYXRhID0gT2JqZWN0LmtleXMoY291bnRzKS5tYXAoa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGFtcGxlID0gZXhhbXBsZXNba2V5XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZXhhbXBsZSwge1xuICAgICAgICAgICAgICAgICAgICBfeTogY291bnRzW2tleV1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Bucket.js\n')},"./src/Chart.js":
/*!**********************!*\
  !*** ./src/Chart.js ***!
  \**********************/
/*! exports provided: Chart */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chart", function() { return Chart; });\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./src/helpers.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\nclass Chart {\n    constructor() {\n        this._x = (d) => d.x;\n        this._y = (d) => d.y;\n        this._height = 420;\n        this._width = 420;\n        this._BAR_GROWTH = 100;\n        this._duration = 300;\n        this._dispatch = d3.dispatch(\'elementClick\', \'elementMiddleClick\', \'elementRightClick\',\n            \'tooltipShow\', \'tooltipHide\');\n        this._xAxisTickFormat = this._tickFormat = this._labelFormat = d => d.toString();\n        this._colours = [ _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.midGrey, _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.lightGrey, _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey ];\n        this._backgroundColour = "#FFF";\n        this._interbarProportion = null;\n    }\n\n    renderLegend(svg, data, min, width, height, getter) {\n        svg = svg || d3.select(this._element).select("svg");\n        svg.selectAll(".legend").remove();\n        if (!this._show_legend) return 0;\n\n        min = min || 2;\n        data = data || this.getSortedData();\n        width = width || this._width;\n        height = height || this._height;\n        getter = getter || (d => d.key);\n\n        // Only if we have multiple series.\n        if (!data || data.length < min) return 0;\n\n        let maxWidth = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["maxBounding"])(svg, data.map(getter)).width;\n\n        const legend = svg.append("g")\n            .attr("class", "legend");\n\n        let elements = legend.selectAll(".legend-element")\n            .data(data);\n\n        const position_start = 20;\n        let position = position_start;\n        let position_height = 0;\n\n        elements.enter()\n            .append("g")\n            .attr("class", (d, i) => "legend-element series series-" + i)\n            .style("cursor", "default")\n            .each((d, i, nodes) => {\n                let element = d3.select(nodes[i]);\n\n                element.append("rect")\n                    .attr("width", 10)\n                    .attr("height", 10)\n                    .attr("rx", 2)\n                    .attr("ry", 2)\n                    .attr("y", -10)\n                    .style("fill", () => this.getSeriesColour(i));\n\n                element.append("text")\n                    .text(getter)\n                    .attr("dx", 12)\n                    .style("font-family", "Open Sans, sans-serif")\n                    .style("font-weight", "normal")\n                    .style("font-size", "12px")\n                    .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n                element.append("title")\n                    .text(getter);\n\n                element.attr("transform", "translate(" + position + "," + position_height +")");\n                const positionDelta = maxWidth + 20; // element.node().getBBox().width + 10;\n                position += positionDelta;\n\n                if (position >= width) {\n                    position = position_start;\n                    position_height += 15;\n                    element.attr("transform", "translate(" + position + "," + position_height + ")");\n                    position += positionDelta;\n                }\n\n            })\n            .on("mouseover", (d, i, nodes) => {\n                svg.selectAll(".series:not(.series-" + i + ")")\n                    .interrupt("legend:highlight")\n                    .transition("legend:highlight")\n                    .style("opacity", 0.3);\n            })\n            .on("mouseout", (d, i, nodes) => {\n                svg.selectAll(".series")\n                    .interrupt("legend:highlight")\n                    .transition("legend:highlight")\n                    .style("opacity", 1);\n            })\n            .style("opacity", 0)\n            .transition()\n            .duration(1000)\n            .style("opacity", 1);\n\n        const legendHeight = legend.node().getBBox().height;\n        legend.attr("transform", "translate(0," + (height - legendHeight) + ")");\n        return legendHeight;\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Chart.js\n')},"./src/Colours.js":
/*!************************!*\
  !*** ./src/Colours.js ***!
  \************************/
/*! exports provided: colours */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"colours\", function() { return colours; });\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the \"Software\"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nlet colours = {\n  // **brandseye.colours.scheme** is our basic colour scheme.\n    scheme: [\n        '#58B6FF',\n        '#5473BD',\n        '#DF71FC',\n        '#9856B0',\n        '#ff58a3',\n        '#D22D6F',\n        '#fc6a4b',\n        '#E53E39',\n        '#FFD658',\n        '#E8AF44',\n        '#43C278',\n        '#318F58'\n    ],\n    // And **brandseye.colours.allColours** defines a large number of colours.\n    allColours: [\n        '#f0f8ff', '#faebd7', '#00ffff', '#7fffd4', '#f0ffff', '#f5f5dc', '#ffe4c4', '#000000', '#ffebcd', '#0000ff', '#8a2be2',\n        '#a52a2a', '#deb887', '#5f9ea0', '#7fff00', '#d2691e', '#ff7f50', '#6495ed', '#fff8dc', '#dc143c', '#00ffff', '#00008b',\n        '#008b8b', '#b8860b', '#a9a9a9', '#006400', '#bdb76b', '#8b008b', '#556b2f', '#ff8c00', '#9932cc', '#8b0000', '#e9967a',\n        '#8fbc8f', '#483d8b', '#2f4f4f', '#00ced1', '#9400d3', '#ff1493', '#00bfff', '#696969', '#1e90ff', '#d19275', '#b22222',\n        '#fffaf0', '#228b22', '#ff00ff', '#dcdcdc', '#f8f8ff', '#ffd700', '#daa520', '#808080', '#008000', '#adff2f', '#f0fff0',\n        '#ff69b4', '#cd5c5c', '#4b0082', '#fffff0', '#f0e68c', '#e6e6fa', '#fff0f5', '#7cfc00', '#fffacd', '#add8e6', '#f08080',\n        '#e0ffff', '#fafad2', '#d3d3d3', '#90ee90', '#ffb6c1', '#ffa07a', '#20b2aa', '#87cefa', '#8470ff', '#778899', '#b0c4de',\n        '#ffffe0', '#00ff00', '#32cd32', '#faf0e6', '#ff00ff', '#800000', '#66cdaa', '#0000cd', '#ba55d3', '#9370d8', '#3cb371',\n        '#7b68ee', '#00fa9a', '#48d1cc', '#c71585', '#191970', '#f5fffa', '#ffe4e1', '#ffe4b5', '#ffdead', '#000080', '#fdf5e6',\n        '#808000', '#6b8e23', '#ffa500', '#ff4500', '#da70d6', '#eee8aa', '#98fb98', '#afeeee', '#d87093', '#ffefd5', '#ffdab9',\n        '#cd853f', '#ffc0cb', '#dda0dd', '#b0e0e6', '#800080', '#ff0000', '#bc8f8f', '#4169e1', '#8b4513', '#fa8072', '#f4a460',\n        '#2e8b57', '#fff5ee', '#a0522d', '#c0c0c0', '#87ceeb', '#6a5acd', '#708090', '#fffafa', '#00ff7f', '#4682b4', '#d2b48c',\n        '#008080', '#d8bfd8', '#ff6347', '#40e0d0', '#ee82ee', '#d02090', '#f5deb3', '#ffffff', '#f5f5f5', '#ffff00', '#9acd32'\n    ],\n\n    // These are the new brandseye colours for 2018, defined in reporting v.4.5.8\n    eighteen: {\n      good: \"#00c9a0\",       // Bright Green\n      series: [\n        \"#eba25d\",           // Muted orange\n        \"#9cd261\",           // Green\n        \"#958cb5\",           // Purple\n      ],\n      lightGrey: \"#e9e9e9\",  // gridlines, bars and columns, neutral sentiment\n      midGrey: \"#c0c0c0\",    // table borders, bars and columns if light grey is too lightGrey\n      darkGrey: \"#444444\",   // All text\n      sentiment: {\n        positive: \"#00b0b9\", // blue\n        neutral: \"#e9e9e9\",  // light grey\n        negative: \"#ee2737\", // Red\n        net: \"#1c1f2a\"       // Elite\n      }\n    }\n\n\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQ29sb3Vycy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2IzanMvLi9zcmMvQ29sb3Vycy5qcz8yY2RhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoQykgMjAxMy0yMDE0LCAyMDE4IEJyYW5kc0V5ZSAoUFRZKSBMVERcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbi8vIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuLy8gd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuLy8gICAgIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbi8vIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4vLyBjb25kaXRpb25zOlxuLy9cbi8vICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vICAgICBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GXG4vLyBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkVcbi8vIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5cbmV4cG9ydCBsZXQgY29sb3VycyA9IHtcbiAgLy8gKipicmFuZHNleWUuY29sb3Vycy5zY2hlbWUqKiBpcyBvdXIgYmFzaWMgY29sb3VyIHNjaGVtZS5cbiAgICBzY2hlbWU6IFtcbiAgICAgICAgJyM1OEI2RkYnLFxuICAgICAgICAnIzU0NzNCRCcsXG4gICAgICAgICcjREY3MUZDJyxcbiAgICAgICAgJyM5ODU2QjAnLFxuICAgICAgICAnI2ZmNThhMycsXG4gICAgICAgICcjRDIyRDZGJyxcbiAgICAgICAgJyNmYzZhNGInLFxuICAgICAgICAnI0U1M0UzOScsXG4gICAgICAgICcjRkZENjU4JyxcbiAgICAgICAgJyNFOEFGNDQnLFxuICAgICAgICAnIzQzQzI3OCcsXG4gICAgICAgICcjMzE4RjU4J1xuICAgIF0sXG4gICAgLy8gQW5kICoqYnJhbmRzZXllLmNvbG91cnMuYWxsQ29sb3VycyoqIGRlZmluZXMgYSBsYXJnZSBudW1iZXIgb2YgY29sb3Vycy5cbiAgICBhbGxDb2xvdXJzOiBbXG4gICAgICAgICcjZjBmOGZmJywgJyNmYWViZDcnLCAnIzAwZmZmZicsICcjN2ZmZmQ0JywgJyNmMGZmZmYnLCAnI2Y1ZjVkYycsICcjZmZlNGM0JywgJyMwMDAwMDAnLCAnI2ZmZWJjZCcsICcjMDAwMGZmJywgJyM4YTJiZTInLFxuICAgICAgICAnI2E1MmEyYScsICcjZGViODg3JywgJyM1ZjllYTAnLCAnIzdmZmYwMCcsICcjZDI2OTFlJywgJyNmZjdmNTAnLCAnIzY0OTVlZCcsICcjZmZmOGRjJywgJyNkYzE0M2MnLCAnIzAwZmZmZicsICcjMDAwMDhiJyxcbiAgICAgICAgJyMwMDhiOGInLCAnI2I4ODYwYicsICcjYTlhOWE5JywgJyMwMDY0MDAnLCAnI2JkYjc2YicsICcjOGIwMDhiJywgJyM1NTZiMmYnLCAnI2ZmOGMwMCcsICcjOTkzMmNjJywgJyM4YjAwMDAnLCAnI2U5OTY3YScsXG4gICAgICAgICcjOGZiYzhmJywgJyM0ODNkOGInLCAnIzJmNGY0ZicsICcjMDBjZWQxJywgJyM5NDAwZDMnLCAnI2ZmMTQ5MycsICcjMDBiZmZmJywgJyM2OTY5NjknLCAnIzFlOTBmZicsICcjZDE5Mjc1JywgJyNiMjIyMjInLFxuICAgICAgICAnI2ZmZmFmMCcsICcjMjI4YjIyJywgJyNmZjAwZmYnLCAnI2RjZGNkYycsICcjZjhmOGZmJywgJyNmZmQ3MDAnLCAnI2RhYTUyMCcsICcjODA4MDgwJywgJyMwMDgwMDAnLCAnI2FkZmYyZicsICcjZjBmZmYwJyxcbiAgICAgICAgJyNmZjY5YjQnLCAnI2NkNWM1YycsICcjNGIwMDgyJywgJyNmZmZmZjAnLCAnI2YwZTY4YycsICcjZTZlNmZhJywgJyNmZmYwZjUnLCAnIzdjZmMwMCcsICcjZmZmYWNkJywgJyNhZGQ4ZTYnLCAnI2YwODA4MCcsXG4gICAgICAgICcjZTBmZmZmJywgJyNmYWZhZDInLCAnI2QzZDNkMycsICcjOTBlZTkwJywgJyNmZmI2YzEnLCAnI2ZmYTA3YScsICcjMjBiMmFhJywgJyM4N2NlZmEnLCAnIzg0NzBmZicsICcjNzc4ODk5JywgJyNiMGM0ZGUnLFxuICAgICAgICAnI2ZmZmZlMCcsICcjMDBmZjAwJywgJyMzMmNkMzInLCAnI2ZhZjBlNicsICcjZmYwMGZmJywgJyM4MDAwMDAnLCAnIzY2Y2RhYScsICcjMDAwMGNkJywgJyNiYTU1ZDMnLCAnIzkzNzBkOCcsICcjM2NiMzcxJyxcbiAgICAgICAgJyM3YjY4ZWUnLCAnIzAwZmE5YScsICcjNDhkMWNjJywgJyNjNzE1ODUnLCAnIzE5MTk3MCcsICcjZjVmZmZhJywgJyNmZmU0ZTEnLCAnI2ZmZTRiNScsICcjZmZkZWFkJywgJyMwMDAwODAnLCAnI2ZkZjVlNicsXG4gICAgICAgICcjODA4MDAwJywgJyM2YjhlMjMnLCAnI2ZmYTUwMCcsICcjZmY0NTAwJywgJyNkYTcwZDYnLCAnI2VlZThhYScsICcjOThmYjk4JywgJyNhZmVlZWUnLCAnI2Q4NzA5MycsICcjZmZlZmQ1JywgJyNmZmRhYjknLFxuICAgICAgICAnI2NkODUzZicsICcjZmZjMGNiJywgJyNkZGEwZGQnLCAnI2IwZTBlNicsICcjODAwMDgwJywgJyNmZjAwMDAnLCAnI2JjOGY4ZicsICcjNDE2OWUxJywgJyM4YjQ1MTMnLCAnI2ZhODA3MicsICcjZjRhNDYwJyxcbiAgICAgICAgJyMyZThiNTcnLCAnI2ZmZjVlZScsICcjYTA1MjJkJywgJyNjMGMwYzAnLCAnIzg3Y2VlYicsICcjNmE1YWNkJywgJyM3MDgwOTAnLCAnI2ZmZmFmYScsICcjMDBmZjdmJywgJyM0NjgyYjQnLCAnI2QyYjQ4YycsXG4gICAgICAgICcjMDA4MDgwJywgJyNkOGJmZDgnLCAnI2ZmNjM0NycsICcjNDBlMGQwJywgJyNlZTgyZWUnLCAnI2QwMjA5MCcsICcjZjVkZWIzJywgJyNmZmZmZmYnLCAnI2Y1ZjVmNScsICcjZmZmZjAwJywgJyM5YWNkMzInXG4gICAgXSxcblxuICAgIC8vIFRoZXNlIGFyZSB0aGUgbmV3IGJyYW5kc2V5ZSBjb2xvdXJzIGZvciAyMDE4LCBkZWZpbmVkIGluIHJlcG9ydGluZyB2LjQuNS44XG4gICAgZWlnaHRlZW46IHtcbiAgICAgIGdvb2Q6IFwiIzAwYzlhMFwiLCAgICAgICAvLyBCcmlnaHQgR3JlZW5cbiAgICAgIHNlcmllczogW1xuICAgICAgICBcIiNlYmEyNWRcIiwgICAgICAgICAgIC8vIE11dGVkIG9yYW5nZVxuICAgICAgICBcIiM5Y2QyNjFcIiwgICAgICAgICAgIC8vIEdyZWVuXG4gICAgICAgIFwiIzk1OGNiNVwiLCAgICAgICAgICAgLy8gUHVycGxlXG4gICAgICBdLFxuICAgICAgbGlnaHRHcmV5OiBcIiNlOWU5ZTlcIiwgIC8vIGdyaWRsaW5lcywgYmFycyBhbmQgY29sdW1ucywgbmV1dHJhbCBzZW50aW1lbnRcbiAgICAgIG1pZEdyZXk6IFwiI2MwYzBjMFwiLCAgICAvLyB0YWJsZSBib3JkZXJzLCBiYXJzIGFuZCBjb2x1bW5zIGlmIGxpZ2h0IGdyZXkgaXMgdG9vIGxpZ2h0R3JleVxuICAgICAgZGFya0dyZXk6IFwiIzQ0NDQ0NFwiLCAgIC8vIEFsbCB0ZXh0XG4gICAgICBzZW50aW1lbnQ6IHtcbiAgICAgICAgcG9zaXRpdmU6IFwiIzAwYjBiOVwiLCAvLyBibHVlXG4gICAgICAgIG5ldXRyYWw6IFwiI2U5ZTllOVwiLCAgLy8gbGlnaHQgZ3JleVxuICAgICAgICBuZWdhdGl2ZTogXCIjZWUyNzM3XCIsIC8vIFJlZFxuICAgICAgICBuZXQ6IFwiIzFjMWYyYVwiICAgICAgIC8vIEVsaXRlXG4gICAgICB9XG4gICAgfVxuXG5cblxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Colours.js\n")},"./src/ColumnChart.js":
/*!****************************!*\
  !*** ./src/ColumnChart.js ***!
  \****************************/
/*! exports provided: ColumnChart */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnChart", function() { return ColumnChart; });\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n/* harmony import */ var _Chart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chart */ "./src/Chart.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\nclass ColumnChart extends _Chart__WEBPACK_IMPORTED_MODULE_1__["Chart"] {\n\n    //------------------------------------------------------\n\n    data(data) {\n        if (!arguments.length) return this._data;\n        if (data && data[0].key === undefined) {\n            data = [\n                {\n                    key: "series 1",\n                    values: data\n                }\n            ];\n        }\n        this._data = data;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    element(element) {\n        if (!arguments.length) return this._element;\n        this._element = element;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    showLabels(show) {\n        if (!arguments.length) return this._show_labels;\n        this._show_labels = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo dispatch\n    showLegend(show) {\n        if (!arguments.length) return this._show_legend;\n        this._show_legend = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    x(x) {\n        if (!arguments.length) return this._x;\n        this._x = x;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    y(y) {\n        if (!arguments.length) return this._y;\n        this._y = y;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    width(width) {\n        if (!arguments.length) return this._width;\n        this._width = width;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    height(height) {\n        if (!arguments.length) return this._height;\n        this._height = height;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    colours(colours) {\n        if (!arguments.length) return this._colours;\n        this._colours = colours;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    backgroundColour(colour) {\n        if (!arguments.length) return this._backgroundColour;\n        this._backgroundColour = colour || "#FFF"; // never set it to null.\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tickFormat(format) {\n        if (!arguments.length) return this._tickFormat;\n        this._tickFormat = format;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    xAxisTickFormat(format) {\n        if (!arguments.length) return this._xAxisTickFormat;\n        this._xAxisTickFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    labelFormat(format) {\n        if (!arguments.length) return this._labelFormat;\n        this._labelFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo missing\n    labelCompression(compression) {\n        if (!arguments.length) return this._compression;\n        this._compression = compression;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    //todo missing\n    dataAxisLabel(label) {\n        if (!arguments.length) return this._dataAxisLabel;\n        this._dataAxisLabel = label;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tooltip(tooltip) {\n        if (!arguments.length) return this._tooltip;\n        this._tooltip = tooltip;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    forceY(force) {\n        if (!arguments.length) return this._forceY;\n        this._forceY = force;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n// todo missing\n    duration(duration) {\n        if (!arguments.length) return this._duration;\n        this._duration = duration;\n        return this;\n    }\n\n// todo missing\n    coarseness(coarseness) {\n        if (!arguments.length) return this._coarseness;\n        this._coarseness = coarseness;\n        return this;\n    }\n\n    // todo missing\n    padding(padding) {\n        if (!arguments.length) return this._padding;\n        this._padding = padding;\n        return this;\n    }\n\n    // todo missing\n    xAxisTooltips(tooltips) {\n        if (!arguments.length) return this._xAxisTooltips;\n        this._xAxisTooltips = tooltips;\n        return this;\n    }\n\n    xAxisOverride(override) {\n        if (!arguments.length) return this._xAxisOverride;\n        this._xAxisOverride = override;\n        return this;\n    }\n\n    interbarProportion(proportion) {\n        if (!arguments.length) return this._interbarProportion;\n        this._interbarProportion = proportion;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    dispatch() {\n        return this._dispatch;\n    }\n\n    //------------------------------------------------------\n\n    render() {\n        if (!this._element) throw new Error("No element set for ColumnChart. See #element()");\n        if (!this._data) {\n            console.warn("No data set for ColumnChart. See #data()");\n            return;\n        }\n\n        const data = this.getTransformedData();\n        const keys = this.getKeys();\n\n        //------------------------------------------------\n        // Set up the SVG area\n\n        let topLevel = d3.select(this._element).select("svg");\n        if (topLevel.empty()) {\n            topLevel = d3.select(this._element).append("svg");\n        }\n\n        topLevel\n            .style("width", this._width + "px")\n            .style("height", this._height + "px");\n\n\n        // ---------------------------------\n        // Layout the showLegend.\n        //\n        // We do this now because we need to know how much space the legend\n        // takes up in order to finish calculating the margins.\n\n        const legendHeight = this.renderLegend();\n\n        //----------------------------------\n        // Calculate margins.\n\n        const margin = {top: 20, right: 20, bottom: 40, left: 40};\n        margin.bottom += legendHeight ? legendHeight + 20 : 0;\n\n        if (this._dataAxisLabel) margin.left += 20 + 12;\n        if (data) {\n            let maxLabelLength = 0;\n            data.forEach(d => {\n                d.data.forEach(d => {\n                    let length = this._xAxisTickFormat(this._x(d)).length;\n                    if (length > maxLabelLength) maxLabelLength = length;\n                })\n            });\n            margin.bottom += maxLabelLength * 2 + 10;    // space for axes labels.\n        }\n\n        const width = this._width - margin.left - margin.right,\n            height = this._height - margin.top - margin.bottom;\n\n        //----------------------------------\n        // Calculate scales and so on.\n\n        const x = d3.scaleBand()\n            .rangeRound([0, width])\n            .padding(this._interbarProportion !== null ? this._interbarProportion : (this._data.length > 1 ? 0.08 : 0.1));\n\n        const xGroup = d3.scaleBand()\n            .padding(0);\n\n        const y = d3.scaleLinear()\n            .rangeRound([height, 0])\n            .nice();\n        this._xscale = x;\n        this._xgroupscale = xGroup;\n        this._yscale = y;\n\n        // Scale the range of the data in the domains\n        x.domain(data.map(d => d.key));\n        xGroup.rangeRound([0, x.bandwidth()]).domain(keys);\n        y.domain([0, d3.max(data, d => d3.max(d.data, d => d._y))]);\n\n        //------------------------------\n\n        let svg = topLevel.select(\'.main-group\');\n\n        if (svg.empty()) {\n            svg = topLevel\n                .append("g")\n                .attr("class", "main-group");\n        }\n\n        svg.attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n        //---------------------------------\n        // Get rid of current labels.\n        svg.select(".chart-labels")\n            .remove();\n\n        //---------------------------------\n        // append the rectangles for the bar chart\n        let groups = svg.select(".bars").selectAll(\'.group\');\n\n        if (groups.empty()) {\n            groups = svg\n                .append("g")\n                .attr("class", "bars")\n                .selectAll(".group");\n        }\n\n        svg.select(".bars")\n            .attr("transform", "translate(0, " + height + "), scale(1, -1)")\n\n        groups = groups.data(data);\n\n        groups.exit().remove();\n\n        // Adding new groups, and hence adding new bars to those groups.\n        groups.enter()\n            .append("g")\n            .attr("class", "group")\n            .attr("transform", d => "translate(" + x(d.key) + ",0)")\n            .attr("width", x.bandwidth())\n            .attr("height", "100%")\n            .merge(groups)\n            .interrupt("groups:move")\n            .transition("groups:move")\n            .attr("transform", d => "translate(" + x(d.key) + ",0)")\n            .attr("width", x.bandwidth())\n            .each((s_d, s_i, nodes) => {\n                let group = d3.select(nodes[s_i])\n\n                let bars = group.selectAll(".bar")\n                    .data(s_d.data);\n\n                bars.exit().remove();\n\n                bars.interrupt("bar:move")     // Animate the bars to their new position.\n                    .transition("bar:move")\n                    .attr("width", xGroup.bandwidth())\n                    .attr("x", d => xGroup(d._key))\n                    .attr("y", 0);\n\n                bars.enter()\n                    .append("rect")\n                    .attr("class", (d, i) => "bar series series-" + i)\n                    .attr("x", d => xGroup(d._key))\n                    .attr("y", 0)\n                    .attr("width", xGroup.bandwidth())\n                    .attr("height", 0)\n                    .style("fill", (d, i) => this.getSeriesColour(i))\n                    .style("cursor", "pointer")\n                    .on("mouseover", (d, i, nodes) => { // Darken the bar on mouse over\n                        d3.select(nodes[i])\n                            .interrupt("hover:colour")\n                            .transition("hover:colour")\n                            .duration(400)\n                            .style("fill", d3.hcl(this.getSeriesColour(i)).darker())\n                        this._dispatch.call("tooltipShow", this, {\n                            e: d3.event,\n                            point: d,\n                            series: s_d,\n                            seriesIndex: s_i,\n                            value: d._y\n                        })\n                    })\n                    .on("mouseout", (d, i, nodes) => { // bar is regular colour on mouse out.\n                        d3.select(nodes[i])\n                            .interrupt("hover:colour")\n                            .transition("hover:colour")\n                            .duration(400)\n                            .style("fill", this.getSeriesColour(i));\n                        this._dispatch.call("tooltipHide", this);\n                    })\n                    .on("click auxclick", (d, i, nodes) => {\n                        this._dispatch.call("elementClick", this, {\n                            e: d3.event,\n                            point: d,\n                            series: d._series,\n                            seriesIndex: s_i,\n                            value: this._y(d)\n                        })\n                    })\n                    .merge(bars)\n                    .interrupt("bar:growth")    // Animate bars growing.\n                    .transition("bar:growth")\n                    .delay((d) => {\n                        return this.calcBarGrowth(s_i, nodes.length);\n                    })\n                    .duration(this._duration)\n                    .style("fill", (d, i) => this.getSeriesColour(i))\n                    .attr("height", d => height - y(d._y));\n\n            })\n\n        // ---------------------------------\n        // Labels loaded after our first bar grows.\n        if (this._show_labels) {\n            svg.transition("bar:growth")\n                .on("end", (d, i, nodes) => {\n                    if (i < nodes.length - 1) return;\n                    this.renderLabels(svg, data, x, xGroup, y);\n                })\n        }\n\n        // ---------------------------------\n        // Draw the y axis data label.\n\n        if (this._dataAxisLabel) {\n            this.renderDataAxisLabel(height, margin);\n        }\n\n        // ---------------------------------\n        // Set the background colour\n\n        d3.select(this._element).select(".background").remove();\n        if (this._backgroundColour) {\n            d3.select(this._element).select("svg")\n                .append("rect")\n                .attr("class", "background")\n                .attr("width", "100%")\n                .attr("height", "100%")\n                .style("fill", this._backgroundColour)\n                .lower();\n        }\n\n        //---------------------------------\n        // add the Y gridlines\n        svg.call(this.grid, width, d3.axisLeft(y).ticks(5));\n\n        //---------------------------------\n        // axes\n        svg.call(this.xaxis, height, x.bandwidth(), d3.axisBottom(x).tickSize(0).tickPadding(5).tickFormat(this._xAxisTickFormat));\n        svg.call(this.yaxis, d3.axisLeft(y).ticks(5).tickFormat(this._tickFormat));\n    }\n\n    //------------------------------------------------------\n\n    /*\n     * Returns an object with two functions, #show() and #hide(),\n     * to show and hide the labels.\n     */\n    labels() {\n        return {\n\n            show: () => {\n                if (this._element) {\n                    let selection = this._element,\n                        data = this.getTransformedData(),\n                        xscale = this._xscale,\n                        xgroup = this._xgroupscale,\n                        yscale = this._yscale;\n\n                    if (selection) selection = d3.select(this._element).select("svg").select("g");\n                    if (!selection.empty() && data && xscale && yscale && xgroup) {\n                        let labels = selection.select(\'.chart-labels\');\n                        if (!labels.empty()) return;\n                        labels.remove()\n                        this.renderLabels(selection, data, xscale, xgroup, yscale, false);\n                    }\n                }\n\n            },\n\n            hide: () => {\n                if (this._element) {\n                    d3.select(this._element)\n                        .select(\'.chart-labels\')\n                        .interrupt("labels")\n                        .interrupt("labels:fade")\n                        .transition("labels:fade")\n                        .style("opacity", 0)\n                        .on("end", (d, i, nodes) => {\n                            d3.select(nodes[i]).remove();\n                        })\n                }\n            }\n        }\n    }\n\n    //------------------------------------------------------\n\n    renderLabels(selection, data, xscale, xgroup, yscale, animate) {\n        animate = animate === undefined ? true : animate;\n        selection.selectAll(".chart-labels").remove();\n\n        let labels = selection.append("g")\n            .attr("class", "chart-labels")\n            // .selectAll(".chart-label")\n            .selectAll(".label-group")\n            .data(data)\n\n        let maxWidth = 0;     // For calculating the max width of text.\n        let fontSize = 12;    // Our initial font size.\n        const buffer = 5;     // Buffer space between words and the top of a bar.\n        const calcDy = (ypos) => ypos < 10 ? fontSize + buffer : -buffer;\n\n        // Want to figure out if the label is too dark / light for the\n        // bar.\n        const getInvertedColor = (i) => {\n            let invertedColor = d3.hcl(this.getSeriesColour(i));\n            invertedColor.l += Math.min(invertedColor.l + 50, 100);\n            return invertedColor;\n        };\n        const shouldInvert = (i) => d3.hcl(this.getSeriesColour(i)).l < 60;\n\n        labels.enter().each((series, s_i, s_nodes) => {\n            let group = d3.select(s_nodes[s_i])\n                .append("g")\n                .attr("class", "label-group")\n                .attr("transform", d => "translate(" + xscale(d.key) + ",0)")\n                .selectAll(".chart-label")\n                .data(series.data)\n                .enter()\n                .each((d, i, nodes) => {\n                    let ypos = yscale(d._y);\n                    let dy = calcDy(ypos);\n                    let text = d3.select(nodes[i])\n                        .append("text")\n                        .text(this._labelFormat(d._y))\n                        .attr("class", "chart-label")\n                        .attr("y", ypos)\n                        .attr("dx", animate ? -15 : 0)\n                        .attr("dy", dy)\n                        .style("opacity", 0)\n                        .style("pointer-events", "none")\n                        // .style("font-family", "Open Sans, sans-serif")\n                        // .style("font-weight", "normal")\n                        // .style("font-size", fontSize + "px")\n                        .style("fill", dy > 0 && shouldInvert(i)? getInvertedColor(i).toString() : _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n                    // Set the x position, which is based on width.\n                    const width = text.node().getBBox().width;\n                    maxWidth = Math.max(width, maxWidth);\n                    text\n                        .attr("x", xgroup(d._key) + xgroup.bandwidth() / 2 - width / 2);\n\n                    text\n                        .transition("labels")\n                        .delay(() => animate ? this.calcBarGrowth(s_i, s_nodes.length) : 0) // Delay in lockstep with bar growth.\n                        .duration(this._duration)\n                        .attr("dx", 0)\n                        .style("opacity", 1)\n                })\n        })\n\n\n        // Figure out if we don\'t have enough space to show our labels.\n        // We then want to resize, if possible.\n        if (xgroup.bandwidth() < maxWidth * 1.05) {\n            let scale = maxWidth / xgroup.bandwidth() * 1.05;\n            fontSize = Math.floor(fontSize / scale);\n\n            if (fontSize < 8) {\n                // The labels are too small.\n                labels.enter().selectAll("text").remove();\n            } else {\n                labels.enter()\n                    .merge(labels)\n                    .selectAll("text")\n                    .style("font-size", fontSize + "px")\n                    .each((d, i, nodes) => {\n                        const text = d3.select(nodes[i]);\n                        const width = text.node().getBBox().width;\n                        const dy = calcDy(d._y);\n\n                        text\n                            .attr("x", xgroup(d._key) + xgroup.bandwidth() / 2 - width / 2)\n                            .style("fill", dy > 0 && shouldInvert(i) ? getInvertedColor(i).toString() : _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n                            .attr("dy", dy);\n                    })\n            }\n        }\n    }\n\n    //------------------------------------------------------\n\n    renderDataAxisLabel(height, margins) {\n        let svg = d3.select(this._element).select(\'svg\');\n        svg.selectAll(".data-labels").remove();\n\n        if (!this._dataAxisLabel) return;\n        let text = this._dataAxisLabel;\n        if (text.long) text = text.long;\n\n        let x = -(margins.top + height / 2);\n\n        let label = svg.append("g")\n            .attr("class", "data-labels")\n            .append("text")\n            .text(text)\n            .attr("transform", "rotate(-90 0,0) translate(" + x + ", 20)")\n            // .style("font-family", "Open Sans, sans-serif")\n            // .style("font-size", "12px")\n            // .style("font-style", "italic")\n            .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n        let width = label.node().getBBox().width;\n        if (width >= height && this._dataAxisLabel.short) {\n            label.text(this._dataAxisLabel.short);\n            width = label.node().getBBox().width;\n        }\n\n        label.attr("dx", -width / 2);\n    }\n\n    //------------------------------------------------------\n\n    grid(selection, width, axis) {\n        selection.select(".grid").remove();\n\n        let grid = selection.append("g")\n            .attr("class", "grid")\n            .call(axis\n                .tickSize(-width)\n                .tickFormat("")\n            );\n\n        grid.selectAll("line")\n            .style("stroke", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.lightGrey);\n        grid.selectAll(".domain").remove();\n\n        grid\n            .lower() // Always ensure that this is earlier in the dom. Things must be drawn on top of it.\n            .style("opacity", 0)\n            .transition()\n            .delay(500)\n            .duration(500)\n            .style("opacity", 1);\n    }\n\n    //------------------------------------------------------\n\n    xaxis(selection, height, width, xaxis) {\n        selection.select(".x-axis").remove();\n        let axis = selection.append("g")\n            .attr("class", "x-axis")\n            .attr("transform", "translate(0," + height + ")")\n            .style("opacity", 0)\n            .call(xaxis);\n\n        axis.select(".domain").remove();\n\n        let max = 0;\n        const fontSize = 12;\n        axis.selectAll("text")\n            // .style("font-family", "Open Sans, sans-serif")\n            // .style("font-size", fontSize + "px")\n            .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n            .nodes()\n            .forEach(text => max = Math.max(max, text.getBBox().width));\n\n        if (max >= width - 10) {\n            const bad = max >= width * 2;\n            const angle = bad ? -90 : -30;\n            const fontSize = width <= 13 ? 8 : 12;\n            const x = bad ? -fontSize : 0;\n            const y = bad ? 5 : 2;\n\n            axis.selectAll("text")\n                .style(\'text-anchor\', \'end\')\n                .style("font-size", fontSize + "px")\n                .attr("transform", () => "translate(" + x + "," + y + ") rotate(" + angle + " 0,0)")\n        }\n\n        axis\n            .transition()\n            .duration(1000)\n            .style("opacity", 1);\n    }\n\n    //------------------------------------------------------\n\n    yaxis(selection, axis) {\n        selection.select(".y-axis").remove();\n        let x = selection.append("g")\n            .attr("class", "y-axis")\n            .call(axis.tickSize(0).tickPadding(10))\n            .style("opacity", 0)\n            .transition()\n            .duration(1000)\n            .style("opacity", 1);\n\n        x.selectAll("text")\n            // .style("font-family", "Open Sans, sans-serif")\n            .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n    }\n\n    //------------------------------------------------------\n\n    calcBarGrowth(i, max) {\n        if (max < 10) return i * this._BAR_GROWTH / 2;\n        if (max < 35) return i * this._BAR_GROWTH / 4;\n        return 1;\n    }\n\n    getSeriesColour(i) {\n        if (i < 0 || !this._colours) return _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.midGrey;\n\n        i = i % this._colours.length;\n        return this._colours[i];\n    }\n\n    getSortedData() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        data = this._data.sort((lhs, rhs) => {\n            lhs = lhs.key.toLowerCase();\n            rhs = rhs.key.toLowerCase();\n\n            if (lhs === rhs) return 0;\n            if (lhs < rhs) return -1;\n            return 1;\n        });\n\n        return data;\n    }\n\n    getTransformedData() {\n        let data = this.getSortedData();\n        if (!data || !data.length) return [];\n\n        let results = [];\n\n        const getX = d => this._xAxisOverride ? this._xAxisOverride[this._x(d)] : this._x(d);\n\n        data.forEach((series, s_i) => {\n            series.values.forEach((d, d_i) => {\n                let field = results.find(bucket => bucket.key === getX(d));\n                if (!field) {\n                    field = {\n                        data: [],\n                        key: getX(d)\n                    };\n                    results.push(field);\n                }\n\n                field.data.push(Object.assign({\n                    _series: series,\n                    _s_i: s_i,\n                    _key: series.key,\n                    _y: this._y(d)\n                }, d));\n            })\n        });\n\n        return results;\n    }\n\n    getKeys() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        return [...new Set(data.map(d => d.key))]\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ColumnChart.js\n')},"./src/FantasticChart.js":
/*!*******************************!*\
  !*** ./src/FantasticChart.js ***!
  \*******************************/
/*! exports provided: chart */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chart", function() { return chart; });\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n/* harmony import */ var _Scales__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Scales */ "./src/Scales.js");\n/* harmony import */ var _Axes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Axes */ "./src/Axes.js");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers */ "./src/helpers.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\nclass FantasticChart {\n\n    constructor() {\n        this._geometries = [];\n        this._x_getter = d => d.x;\n        this._y_getter = d => d.y;\n        this._data = [];\n        this._element = null;\n        this._width = 900;\n        this._height = 512;\n        this._colour = () => _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.midGrey;\n        this._size = () => 1;\n        this._scale_x = Object(_Scales__WEBPACK_IMPORTED_MODULE_1__["scaleIdentity"])();\n        this._scale_y = Object(_Scales__WEBPACK_IMPORTED_MODULE_1__["scaleIdentity"])();\n        this._colour = () => 1;\n        this._facet_x = null;\n        this._colour_scale = d3.schemeAccent;\n        this._x_formatter = d => "" + d;\n    }\n\n    /*\n     * A DOM element that we want to render to.\n     * See, for instance, document.getElementById(id), to get\n     * such a dom element.\n     */\n    element(el) {\n        if (arguments.length === 0) return this._element;\n        this._element = el;\n        return this;\n    }\n\n    width(width) {\n        if (arguments.length === 0) return this._width;\n        if (typeof width !== "number" && width > 0) throw new Error("width must be a positive number");\n        this._width = width;\n        return this;\n    }\n\n    height(height) {\n        if (arguments.length === 0) return this._height;\n        if (typeof height !== "number" && height > 0) throw new Error("height must be a positive number");\n        this._height = height;\n        return this;\n    }\n\n    x(getter) {\n        if (arguments.length === 0) return this._x_getter;\n        if (typeof getter !== \'function\') throw new Error("x getter must be a function");\n        this._x_getter = getter;\n        return this;\n    }\n\n    y(getter) {\n        if (arguments.length === 0) return this._y_getter;\n        if (typeof getter !== \'function\') throw new Error("y getter must be a function");\n        this._y_getter = getter;\n        return this;\n    }\n\n    scaleX(scale) {\n        if (arguments.length === 0) return this._scale_x;\n        this._scale_x = scale;\n        return this;\n    }\n\n    scaleY(scale) {\n        if (arguments.length === 0) return this._scale_y;\n        this._scale_y = scale;\n        return this;\n    }\n\n    /*\n     * Add geometry to render. Multiple geometries can be added.\n     */\n    geometry(geom) {\n        if (arguments.length === 0) return this._geometries.slice(0);\n        this._geometries.push(geom);\n        return this;\n    }\n\n    size() {\n        console.log("=> size: not implemented")\n    }\n\n    formatX(formatter) {\n        if (arguments.length === 0) return this._x_formatter;\n        if (typeof formatter !== \'function\') throw new Error("formatter must be a function");\n        this._x_formatter = formatter;\n        return this;\n    }\n\n    /**\n     * Defines how to separate data visually using colours. It\n     * does not define what colour to use.\n     * @param colour\n     * @returns {*}\n     */\n    colour(colour) {\n        if (arguments.length === 0) return this._colour;\n        if (typeof colour !== \'function\') throw new Error("colour must be a function");\n        this._colour = colour;\n        return this;\n    }\n\n    /**\n     * Defines colours to use.\n     * @param colours\n     */\n    colourScale(colours) {\n        if (arguments.length === 0) return this._colour_scale;\n        if (typeof colours !== \'object\' || !colours.length) throw new Error("colour must be an Array");\n        this._colour_scale = colours;\n        return this;\n    }\n\n    facetX(selector) {\n        if (arguments.length === 0) return this._facet_x;\n        if (selector != null && typeof selector !== \'function\') throw new Error("The facet selector must be a function");\n        this._facet_x = selector;\n        return this;\n    }\n\n    data(data) {\n        if (arguments.length === 0) return this._data.slice();\n        this._data = data;\n        return this;\n    }\n\n    render() {\n        console.log("-------- Rendering ---------");\n\n        //-----------------------------------------------\n        // Create initial svg element\n        let svg = d3.select(this._element).select("svg");\n        if (svg.empty()) svg = d3.select(this._element).append("svg");\n\n        //-----------------------------------------------\n        // Calculate the space that various elements will want to take up\n\n        const geometries = this.sortGeometries();\n        geometries.forEach(geom => this.setupGeom(geom));\n        const axisWidth = geometries.length ? Object(_helpers__WEBPACK_IMPORTED_MODULE_3__["maxBounding"])(svg, geometries[0].yValues()).width + 10 : 0;\n\n        console.log("Axis width is:", axisWidth);\n\n        //-----------------------------------------------\n        // Calculate margins without knowing the final height.\n        // We can only calculate the final height once we can accurately\n        // determine how to lay out the x-axis.\n\n        const margin = {top: 10, right: 10, bottom: 10, left: 10 + axisWidth};\n        const width  = this._width - margin.left - margin.right;\n\n        //-----------------------------------------------\n        // Determine initial facet / small multiple information\n\n        const facets = getFacets(this._data, this._facet_x);\n        const singleFacet = facets.length === 1;\n\n        const facetBand = d3.scaleBand()\n                            .rangeRound([0, width])\n                            .padding(singleFacet ? 0 : 0.1) // take up full space if the only facet.\n                            .domain(facets);\n\n        //-----------------------------------------------\n        // Determine x-axis height\n        // We do this by rendering the various x-axes offscreen.\n\n        geometries.forEach(geom => geom.width(facetBand.bandwidth()));\n        const axisSizeArea = svg.append("g")\n            .attr("transform", "translate(-1000, -1000)");\n\n        let axisHeight = 0;\n        facets.forEach(facet => {\n            const xScale = geometries[0]\n                .width(facetBand.bandwidth())\n                .facet(singleFacet ? null : (d => this._facet_x(d) === facet))\n                .getD3XScale();\n\n            let height = Object(_Axes__WEBPACK_IMPORTED_MODULE_2__["xaxis"])(axisSizeArea, this._height,\n                xScale.bandwidth ? xScale.bandwidth() : facetBand.bandwidth() / xScale.domain().length,\n                d3.axisBottom(xScale).tickSize(0).tickPadding(5).tickFormat(geometries[0].formatX()));\n\n            axisHeight = Math.max(height, axisHeight);\n        });\n\n        axisSizeArea.remove();\n\n        //-----------------------------------------------\n        // Update margins and calculate height\n\n        margin.bottom += axisHeight;\n        const height = this._height - margin.top - margin.bottom;\n\n        //-----------------------------------------------\n        // Setup the svg\n\n        svg\n            .style("width", this._width + "px")\n            .style("height", this._height + "px");\n\n        //-----------------------------------------------\n        // An area for us to render the geometries in to.\n\n        let drawingArea = svg.select(\'.drawing-area\');\n\n        if (drawingArea.empty()) {\n            drawingArea = svg\n                .append("g")\n                .attr("class", "drawing-area")\n        }\n\n        drawingArea.attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n\n        //-----------------------------------------------\n        // Set up small multiples / facets\n\n        let facetAreas = drawingArea.selectAll(\'.facet\').data(facets);\n        facetAreas.exit().remove();\n\n        //-----------------------------------------------\n        // Setup axes.\n\n        let xAxisArea = svg.select(".x-axis-area");\n\n        xAxisArea.remove();\n        xAxisArea = svg\n            .append("g")\n            .attr("class", "x-axis-area");\n\n        xAxisArea.attr("transform", "translate(" + margin.left + ",0)");\n\n\n        let yAxisArea = svg.select(".y-axis-area");\n\n        yAxisArea.remove();\n        yAxisArea = svg\n            .append("g")\n            .attr("class", "y-axis-area");\n\n\n        if (geometries.length) {\n            // Draw a little x-axis for every facet.\n            facets.forEach(facet => {\n                const xScale = geometries[0]\n                    .width(facetBand.bandwidth())\n                    .height(height)\n                    .facet(singleFacet ? null : (d => this._facet_x(d) === facet))\n                    .getD3XScale();\n\n                const area = xAxisArea\n                    .append("g")\n                    .attr("transform", "translate(" + (facetBand(facet)) + ",0)")// + (this._height - axisHeight) +")")\n                    .attr("width", facetBand.bandwidth());\n\n\n                Object(_Axes__WEBPACK_IMPORTED_MODULE_2__["xaxis"])(area, this._height,\n                    xScale.bandwidth ? xScale.bandwidth() : facetBand.bandwidth() / xScale.domain().length,\n                    d3.axisBottom(xScale).tickSize(0).tickPadding(5).tickFormat(geometries[0].formatX()))\n            });\n\n            const yscale = geometries[0]\n                .height(height)\n                .getD3YScale();\n\n            Object(_Axes__WEBPACK_IMPORTED_MODULE_2__["yaxis"])(yAxisArea, d3.axisLeft(yscale).ticks(5)); //;.tickFormat(this._tickFormat));\n        }\n\n\n        //-----------------------------------------------\n        // Draw individual geometries.\n\n        facetAreas\n            .enter()\n            .append("g")\n            .attr("class", "facet")\n            .merge(facetAreas)\n            .attr("width", facetBand.bandwidth())\n            .attr("transform", facetId => {\n                if (singleFacet) return "translate(0,0)";\n                return "translate(" + facetBand(facetId) + ",0)";\n            })\n            .each((facet, facet_i, facetNodes) => {\n                console.log("------------ facet ", facet || "single-facet");\n                const area = d3.select(facetNodes[facet_i]);\n                let geoms = area.selectAll(".geometry").data(geometries);\n\n                geoms.exit().remove();\n\n                geoms.enter()\n                          .each((geom, i, nodes) => {\n                              const geom_width  = facetBand.bandwidth(),\n                                    geom_height = height;\n\n                              const geom_top  = 0,\n                                    geom_left = 0;\n\n\n                              let node = d3.select(nodes[i]);\n                              node.append("g")\n                                  .attr("class", "geometry")\n                                  .attr("transform", "translate(" + geom_left + "," + geom_top + ")")\n                                  .each((d, i, nodes) => {\n                                      console.log("Setting height for", geom.name(), "to", height - axisHeight);\n                                      geom.element(d3.select(nodes[i]))\n                                          .facet(singleFacet ? null : (d => this._facet_x(d) === facet))\n                                          .height(geom_height)\n                                          .width(geom_width)\n                                          .render();\n                                  })\n                          });\n\n                // Ensure this is rendered on top of other things.\n                area.select(".x-axis").raise();\n            })\n\n\n    }\n\n\n    /*\n     * Ensures that each geom has the settings that it needs.\n     */\n    setupGeom(geom) {\n        geom.setupX(this._x_getter)\n            .setupY(this._y_getter)\n            .setupColour(this._colour)\n            .setupSize(this._size)\n            .setupScaleX(this._scale_x)\n            .setupScaleY(this._scale_y)\n            .setupFormatX(this._x_formatter)\n            .setupColourScale(this._colour_scale);\n        geom.data(this._data);\n    }\n\n\n    /**\n     * We want to ensure that geometries have a particular order to them.\n     * This is important for rendering: lines should be rendered on top of\n     * large histogram rectangles, for instance, otherwise they will be hidden.\n     */\n    sortGeometries() {\n        if (!this._geometries || !this._geometries.length) return [];\n\n        let geometries = this._geometries.slice(0);\n        geometries.sort((lhs, rhs) => {\n            return lhs.priority() - rhs.priority();\n        });\n\n        return geometries;\n    }\n\n}\n\n\n/*\n * Returns the unique facet choices from the data, given a facet selector.\n */\nfunction getFacets(data, selector) {\n    if (!selector || !data || !data.length) return [1];\n\n    const keys = new Set(data.map(selector));\n    return [...keys];\n}\n\n\n\n\nfunction chart() {\n    return new FantasticChart();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/FantasticChart.js\n')},"./src/Geometry.js":
/*!*************************!*\
  !*** ./src/Geometry.js ***!
  \*************************/
/*! exports provided: Geometry */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Geometry", function() { return Geometry; });\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nclass Geometry {\n\n    constructor(name, priority) {\n        this._name = name || "[UNNAMED GEOMETRY]";\n        this._chart_x_getter = null;\n        this._chart_y_getter = null;\n        this._x_getter = null;\n        this._y_getter = null;\n        this._colour = null;\n        this._size = null;\n        this._scale_x = null;\n        this._scale_y = null;\n        this._facet_selector = null;\n        this._chart_colour_scale = null;\n        this._x_formatter = null;\n        this._chart_x_formatter = null;\n        this._priority = priority || 1;\n    }\n\n    name() {\n        return this._name;\n    }\n\n    /**\n     * Provides a sort order priority for metrics. Metrics with a higher priority\n     * are drawn on top of lower priority metrics.\n     */\n    priority() {\n        return this._priority;\n    }\n\n    element(el) {\n        if (arguments.length === 0) return this._element;\n        this._element = el;\n        return this;\n    }\n\n    x(getter) {\n        if (arguments.length === 0) return this._x_getter || this._chart_x_getter;\n        if (typeof getter !== \'function\') throw new Error("x getter must be a function");\n        this._x_getter = getter;\n        return this;\n    }\n\n    y(getter) {\n        if (arguments.length === 0) return this._y_getter || this._chart_y_getter;\n        if (typeof getter !== \'function\') throw new Error("y getter must be a function");\n        this._y_getter = getter;\n        return this;\n    }\n\n    setupX(getter) {\n        if (arguments.length === 0) return this._chart_x_getter;\n        if (typeof getter !== \'function\') throw new Error("x getter must be a function");\n        this._chart_x_getter = getter;\n        return this;\n    }\n\n    setupY(getter) {\n        if (arguments.length === 0) return this._chart_y_getter;\n        if (typeof getter !== \'function\') throw new Error("y getter must be a function");\n        this._chart_y_getter = getter;\n        return this;\n    }\n\n    colour(colour) {\n        if (arguments.length === 0) return this._colour || this._chart_colour;\n        this._colour = colour;\n        return this;\n    }\n\n    setupColour(colour) {\n        if (arguments.length === 0) return this._chart_colour;\n        this._chart_colour = colour;\n        return this;\n    }\n\n    colourScale(colours) {\n        if (arguments.length === 0) return this._chart_colour_scale || this._colour_scale;\n        if (typeof colours !== \'object\' || !colours.length) throw new Error("colour must be an Array");\n        this._colour_scale = colours;\n        return this;\n    }\n\n    setupColourScale(colours) {\n        if (arguments.length === 0) return this._chart_colour_scale;\n        if (typeof colours !== \'object\' || !colours.length) throw new Error("colour must be an Array");\n        this._chart_colour_scale = colours;\n        return this;\n    }\n\n    size(size) {\n        if (arguments.length === 0) return this._size || this._chart_size;\n        this._size = size;\n        return this;\n    }\n\n    setupSize(size) {\n        if (arguments.length === 0) return this._chart_size;\n        this._chart_size = size;\n        return this;\n    }\n\n    scaleX(scale) {\n        if (arguments.length === 0) return this._scale_x || this._chart_scale_x;\n        this._scale_x = scale;\n        return this;\n    }\n\n    setupScaleX(scale) {\n        if (arguments.length === 0) return this._chart_scale_x;\n        this._chart_scale_x = scale;\n        return this;\n    }\n\n    scaleY(scale) {\n        if (arguments.length === 0) return this._scale_y || this._chart_scale_y;\n        this._scale_y = scale;\n        return this;\n    }\n\n    setupScaleY(scale) {\n        if (arguments.length === 0) return this._chart_scale_y;\n        this._chart_scale_y = scale;\n        return this;\n    }\n\n    formatX(formatter) {\n        if (arguments.length === 0) return this._x_formatter || this._chart_x_formatter;\n        if (typeof formatter !== \'function\') throw new Error("formatter must be a function");\n        this._x_formatter = formatter;\n        return this;\n    }\n\n    setupFormatX(formatter) {\n        if (arguments.length === 0) return this._chart_x_formatter;\n        if (typeof formatter !== \'function\') throw new Error("formatter must be a function");\n        this._chart_x_formatter = formatter;\n        return this;\n    }\n\n    width(width) {\n        if (arguments.length === 0) return this._width;\n        this._width = width;\n        return this;\n    }\n\n    height(height) {\n        if (arguments.length === 0) return this._height;\n        this._height = height;\n        return this;\n    }\n\n    data(data) {\n        if (arguments.length === 0) return this._data;\n        this._data = data;\n        return this;\n    }\n\n    facet(selector) {\n        if (arguments.length === 0) return this._facet_selector;\n        if (selector != null && typeof selector !== \'function\' && selector !== null) throw new Error("Facet selector must be a function");\n        this._facet_selector = selector;\n        return this;\n    }\n\n\n    /*\n     * This takes our array of data, and determines what elements\n     * are to be mapped to what aesthetic values, such as colour or size.\n     * Data is grouped by these fields.\n\n     */\n    prepareData(data, faceted) {\n        faceted = !!faceted && this.facet();\n        data = data || this._data;\n        if (!data || !data.length) return [];\n\n        const x = this.x(),\n              y = this.y(),\n              scaleX = this.scaleX(),\n              scaleY = this.scaleY();\n\n        let mapped = {};\n\n        data.forEach(d => {\n            if (faceted && !this.facet()(d)) return;\n            const object = Object.assign({\n                _x: scaleX.transform(x(d)),\n                _y: scaleY.transform(y(d)),\n                _colour: this.colour()(d),\n                _size: this.size()(d)\n            }, d);\n\n            const key = getKey(object);\n            object._key = key;\n\n            let series = mapped[key] || getKeyParameters(object);\n            series.data.push(object);\n            mapped[key] = series;\n        });\n\n        return Object.values(mapped);\n    }\n\n    getD3XScale() {\n        throw new Error("getD3XScale not implemented for " + this.name());\n    }\n\n    getD3YScale() {\n        throw new Error("getD3YScale not implemented for " + this.name());\n    }\n\n    /**\n     * Get all the Y values for this geometry, ignoring faceting.\n     */\n    yValues() {\n        return this.data()\n            .map(d => this.y()(d))\n            .map(d => this.scaleY().transform(d));\n    }\n\n    /**\n     * Get all the Y values for this geometry, ignoring faceting.\n     */\n    xValues() {\n        return this.data()\n                   .map(d => this.x()(d))\n                   .map(d => this.scaleX().transform(d));\n    }\n\n\n    /**\n     * Implement your render code here.\n     */\n    render() {\n        throw new Error("RENDER NOT IMPLEMENTED FOR " + this.name());\n    }\n\n\n    /**\n     * Returns the unique values that the colour function\n     * returns.\n     * @param data\n     * @returns {*}\n     */\n    getColourDomain(data) {\n        if (!data || !data.length) return [];\n\n        const colours = new Set();\n\n        // todo calculate buckets\n        data.forEach(series => {\n            series.data.forEach(d => {\n                colours.add(this.colour()(d))\n            });\n        });\n\n        return [...colours]\n    }\n\n}\n\nfunction getKey(d) {\n    return "" + d._size + ":" + d._colour;\n}\n\nfunction getKeyParameters(d) {\n    return {\n        _key: getKey(d),\n        _size: d._size,\n        _colour: d._colour,\n        data: []\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Geometry.js\n')},"./src/Histogram.js":
/*!**************************!*\
  !*** ./src/Histogram.js ***!
  \**************************/
/*! exports provided: histogram */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "histogram", function() { return histogram; });\n/* harmony import */ var _Geometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Geometry */ "./src/Geometry.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nclass Histogram extends _Geometry__WEBPACK_IMPORTED_MODULE_0__["Geometry"] {\n\n    constructor() {\n        super("HISTOGRAM");\n        this._BAR_GROWTH = 100;\n    }\n\n    render() {\n        console.log("\\tRendering HISTOGRAM");\n\n        const element = this._element;\n        const data = this.prepareData(null, true);\n        const allData = this.prepareData(null, false);\n        const width = this._width,\n              height = this._height;\n\n        element.classed("histogram", true);\n\n        const x = this.getD3XScale(data, width);\n\n        const y = this.getD3YScale(allData, height);\n\n        const xGroup = d3.scaleBand()\n                         .padding(0)\n                         .domain(this.getKeys(data))\n                         .rangeRound([0, x.bandwidth()]);\n\n        const colours = d3.scaleOrdinal(this.colourScale())\n                          .domain(this.getColourDomain(allData));\n\n        let groups = element.select(".bars").selectAll(\'.group\');\n\n        if (groups.empty()) {\n            groups = element\n                .append("g")\n                .attr("class", "bars")\n                .selectAll(".group");\n        }\n\n        // Ensure that we\'re always using the correct height.\n        element.select(".bars")\n           .attr("transform", "translate(0, " + height + "), scale(1, -1)")\n\n        groups = groups.data(data);\n\n        groups.exit().remove();\n\n        groups.enter()\n              .append("g")\n                  .attr("class", "group")\n                  .attr("transform", d => "translate(" + x(d._key) + ",0)")\n                  .attr("width", x.bandwidth())\n                  .attr("height", "100%")\n              .merge(groups)\n              .interrupt("groups:move")\n              .transition("groups:move")\n                  .attr("transform", d => "translate(" + x(d._key) + ",0)")\n                  .attr("width", x.bandwidth())\n              .each((s_d, s_i, nodes) => {\n                  let group = d3.select(nodes[s_i]);\n\n                  let bars = group.selectAll(".bar")\n                                  .data(s_d.data);\n\n                  bars.exit().remove();\n\n                  bars.interrupt("bar:move")     // Animate the bars to their new position.\n                      .transition("bar:move")\n                      .attr("width", xGroup.bandwidth())\n                      .attr("x", d => xGroup(d._key))\n                      .attr("y", 0);\n\n                  bars.enter()\n                      .append("rect")\n                          .attr("class", (d, i) => "bar series series-" + i)\n                          .attr("x", d => xGroup(d._key))\n                          .attr("y", 0)\n                          .attr("width", xGroup.bandwidth())\n                          .attr("height", 0)\n                          .style("fill", d => colours(d._colour))//d => d._colour === 1 ? "grey" : "green")\n                          .style("stroke", d => d3.hcl(d._colour).darker())\n                          .style("cursor", "pointer")\n                      .merge(bars)\n                      .interrupt("bar:growth")    // Animate bars growing.\n                      .transition("bar:growth")\n                      .delay(() => this.calcBarGrowth(s_i, nodes.length))\n                          .style("fill", d => d._colour)\n                          .attr("height", d => height - y(d._y));\n\n                  //     .on("mouseover", (d, i, nodes) => { // Darken the bar on mouse over\n                  //         d3.select(nodes[i])\n                  //           .interrupt("hover:colour")\n                  //           .transition("hover:colour")\n                  //           .duration(400)\n                  //           .style("fill", d3.hcl(this.getSeriesColour(i)).darker())\n                  //         this._dispatch.call("tooltipShow", this, {\n                  //             e: d3.event,\n                  //             point: d,\n                  //             series: s_d,\n                  //             seriesIndex: s_i,\n                  //             value: d._y\n                  //         })\n                  //     })\n                  //     .on("mouseout", (d, i, nodes) => { // bar is regular colour on mouse out.\n                  //         d3.select(nodes[i])\n                  //           .interrupt("hover:colour")\n                  //           .transition("hover:colour")\n                  //           .duration(400)\n                  //           .style("fill", this.getSeriesColour(i));\n                  //         this._dispatch.call("tooltipHide", this);\n                  //     })\n                  //     .on("click auxclick", (d, i, nodes) => {\n                  //         this._dispatch.call("elementClick", this, {\n                  //             e: d3.event,\n                  //             point: d,\n                  //             series: d._series,\n                  //             seriesIndex: s_i,\n                  //             value: this._y(d)\n                  //         })\n                  //     })\n\n\n              })\n    }\n\n    calcBarGrowth(i, max) {\n        if (max < 10) return i * this._BAR_GROWTH / 2;\n        if (max < 35) return i * this._BAR_GROWTH / 4;\n        return 1;\n    }\n\n    prepareData(data, faceted) {\n        data = _Geometry__WEBPACK_IMPORTED_MODULE_0__["Geometry"].prototype.prepareData.call(this, data, faceted);\n\n        let results = {};\n\n        // We want to calculate what bucket each bit of data belongs to.\n        const buckets = this.scaleX()\n                            .buckets(Object\n                                .values(data)\n                                .map(d => d.data)\n                                .reduce((acc, cur) => acc.concat(cur))\n                                .map(d => d._x));\n\n        // Sort data in to their appropriate buckets. This may be\n        // specific date buckets, or general buckets for continuous data.\n        Object.keys(data).forEach(key => {\n            let values = data[key].data;\n            values.forEach(d => {\n                d._bucket = buckets.bucket(d._x);\n                let bucket = results[d._bucket] || { _key: d._bucket, data: [] };\n                bucket.data.push(d);\n                results[d._bucket] = bucket;\n            })\n        });\n\n        return buckets.consolidateBuckets(Object.values(results));\n    }\n\n\n    getBuckets(data) {\n        if (!data || !data.length) return [];\n\n        // todo calculate buckets\n        let buckets = new Set(data.map(d => d._key));\n\n\n        return [...buckets]\n    }\n\n    getKeys(data) {\n        if (!data || !data.length) return [];\n\n        let keys = new Set();\n\n        // todo calculate buckets\n        Object.keys(data).forEach(key => {\n            let values = data[key].data;\n            values.forEach(d => keys.add(d._key))\n        });\n\n\n        return [...keys]\n    }\n\n    getD3XScale(data, width) {\n        data = data || this.prepareData(null, true);\n        width = width || this.width();\n\n        return d3.scaleBand()\n                 .rangeRound([0, width])\n                 .padding(data[0].data.length > 1 ? 0.05 : 0)\n                 .domain(data.map(d => d._key));\n    }\n\n    getD3YScale(data, height) {\n        data = data || this.prepareData(null, false);\n        height = height || this.height();\n\n        return d3.scaleLinear()\n                 .rangeRound([height, 0])\n                 .nice()\n                 .domain([0, d3.max(data, d => d3.max(d.data, d => d._y))]);\n    }\n\n}\n\n\nfunction histogram() {\n    return new Histogram();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Histogram.js\n')},"./src/Line.js":
/*!*********************!*\
  !*** ./src/Line.js ***!
  \*********************/
/*! exports provided: line */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "line", function() { return line; });\n/* harmony import */ var _Geometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Geometry */ "./src/Geometry.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nclass Line extends _Geometry__WEBPACK_IMPORTED_MODULE_0__["Geometry"] {\n\n    constructor() {\n        super("LINE", 2);\n    }\n\n    render() {\n        console.log("\\t Rendering LINE");\n\n        const element = this._element;\n        const data = this.prepareData();\n        const width = this._width,\n              height = this._height;\n        const allData = data.map(d => d.data).reduce((acc, val) => acc.concat(val));\n\n        element.classed("line-chart", true);\n\n\n        const x = this.getD3XScale(allData, width);\n        const y = this.getD3YScale(allData, height);\n\n        console.log("lines y range", y.range());\n        console.log("lines y domain", y.domain());\n\n        const colours = d3.scaleOrdinal(this.colourScale())\n                          .domain(this.getColourDomain(data));\n\n\n        //---------------------------------\n        // append the lines\n        let lineGroup = element.select(".lines");\n        lineGroup.selectAll("circle").remove();\n\n        let circle = false;\n        let lastMouse = null;\n        let lastMin = null;\n\n        if (lineGroup.empty()) {\n            lineGroup = element\n                .append("g")\n                .attr("class", "lines")\n                .attr("width", this.width())\n                .attr("height", this.height());\n\n            // This is needed to provide area for mouse interactions.\n            lineGroup\n                .append("rect")\n                .style("opacity", "0")\n                .attr("width", "100%")\n                .attr("height", "100%");\n        }\n\n        lineGroup\n            .on("mousemove", (d, i, nodes) => { // Darken the bar on mouse over\n                const mouse = d3.mouse(nodes[i]);\n\n                const xval = x.invert(mouse[0]);\n                const yval = y.invert(mouse[1]);\n                // let min = this.getClosestPoint(xval, yval, this.getTransformedData()[0].data);\n\n                let mins = data.map(d => getClosestPoint(xval, yval, d.data));\n                mins.forEach(d => d._dist =  [x(d._x), y(d._y)]);\n\n                mins = mins.filter(min => {\n                    const minScreenDist = Math.sqrt((mouse[0] - min._dist[0]) ** 2 + (mouse[1] - min._dist[1]) ** 2);\n                    min._min_screen = minScreenDist;\n                    return minScreenDist < 100;\n                });\n\n\n                if (!mins || !mins.length) {\n                    lastMouse = null;\n                    lineGroup.selectAll("circle").remove();\n                    return;\n                }\n\n                mins = mins.sort((lhs, rhs) => lhs._min_screen - rhs._min_screen);\n                let min = mins[0];\n\n                if (circle) {\n                    if (lastMin && min._x.getTime() === lastMin._x.getTime()) return;\n                    lineGroup.selectAll("circle").remove();\n                }\n\n                circle = true;\n                lastMouse = mouse;\n                lastMin = min;\n                lineGroup\n                    .append("circle")\n                    .attr("cx", x(min._x))\n                    .attr("cy", y(min._y))\n                    .attr("r", 10)\n                    .attr("fill", d._colour)\n                    .style("opacity", 0.1)\n                    .on("mouseover", () => {\n                        this._dispatch.call("tooltipShow", this, {\n                            e: d3.event,\n                            point: min,\n                            series: data[min._s_i],\n                            seriesIndex: min._s_i,\n                            value: min._y\n                        })\n                    })\n                    .on("mouseout", (d, i, nodes) => { // bar is regular colour on mouse out.\n                        this._dispatch.call("tooltipHide", this);\n                    })\n                    .transition()\n                    .style("opacity", 0.5)\n\n            });\n\n        let lines = lineGroup.selectAll(\'.line\');\n        lines = lines.data(data);\n\n        lines.exit().remove();\n\n        const line = d3.line()\n                       .x(d => x(d._x))\n                       .y(d => y(d._y));\n\n        lines\n            .enter()\n            .append("path")\n                .attr("class", "line")\n                .attr("fill", "none")\n                .attr("stroke", d => d3.hcl(colours(d._colour)).darker())\n                .attr("stroke-linejoin", "round")\n                .attr("stroke-linecap", "round")\n                .attr("stroke-width", 2)\n                .style("opacity", 0)\n            .transition()\n                .style("opacity", 1)\n                .attr("d", d => line(d.data));\n\n        lines\n            .transition()\n            .attr("d", d => line(d.data));\n    }\n\n\n    getD3XScale(data, width) {\n        width = width || this.width();\n        data = data || this.prepareData()\n                           .map(d => d.data)\n                           .reduce((acc, val) => acc.concat(val));\n\n        return d3.scaleTime()\n                    .range([0, width])\n                 .domain(d3.extent(data, d => d._x));\n    }\n\n    getD3YScale(data, height) {\n        data = data || this.prepareData()\n                           .map(d => d.data)\n                           .reduce((acc, val) => acc.concat(val));\n        height = height || this.height();\n\n        return d3.scaleLinear()\n          .range([height, 0])\n          .nice(5)\n          .domain([Math.min(0, d3.min(data, d => d._y)), d3.max(data, d => d._y)]);\n\n    }\n}\n\n\nfunction getClosestPoint(xval, yval, data) {\n    let calcDist = d => Math.sqrt(Math.abs(d._x - xval) ** 2 + (d._y - yval) ** 2);\n    let min = data[0];\n    let minDist = calcDist(min);\n\n    data.forEach(d => {\n        let dist = calcDist(d);\n        if (dist < minDist) {\n            minDist = dist;\n            min = d;\n        }\n    });\n\n    return min;\n}\n\n\n\nfunction line() {\n    return new Line();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Line.js\n')},"./src/LineChart.js":
/*!**************************!*\
  !*** ./src/LineChart.js ***!
  \**************************/
/*! exports provided: LineChart */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineChart", function() { return LineChart; });\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n/* harmony import */ var _Chart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chart */ "./src/Chart.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\nclass LineChart extends _Chart__WEBPACK_IMPORTED_MODULE_1__["Chart"] {\n\n    constructor() {\n        super();\n        this._xAxisTickFormat = d3.timeFormat("%B %d");\n    }\n\n    //------------------------------------------------------\n\n    data(data) {\n        if (!arguments.length) return this._data;\n        if (data && data[0].key === undefined) {\n            data = [\n                {\n                    key: "series 1",\n                    values: data\n                }\n            ];\n        }\n        this._data = data;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    element(element) {\n        if (!arguments.length) return this._element;\n        this._element = element;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    showLabels(show) {\n        if (!arguments.length) return this._show_labels;\n        this._show_labels = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo dispatch\n    showLegend(show) {\n        if (!arguments.length) return this._show_legend;\n        this._show_legend = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    x(x) {\n        if (!arguments.length) return this._x;\n        this._x = x;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    y(y) {\n        if (!arguments.length) return this._y;\n        this._y = y;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    width(width) {\n        if (!arguments.length) return this._width;\n        this._width = width;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    height(height) {\n        if (!arguments.length) return this._height;\n        this._height = height;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    colours(colours) {\n        if (!arguments.length) return this._colours;\n        this._colours = colours;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    backgroundColour(colour) {\n        if (!arguments.length) return this._backgroundColour;\n        this._backgroundColour = colour || "#FFF"; // never set it to null.\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tickFormat(format) {\n        if (!arguments.length) return this._tickFormat;\n        this._tickFormat = format;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    xAxisTickFormat(format) {\n        if (!arguments.length) return this._xAxisTickFormat;\n        this._xAxisTickFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    labelFormat(format) {\n        if (!arguments.length) return this._labelFormat;\n        this._labelFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo missing\n    labelCompression(compression) {\n        if (!arguments.length) return this._compression;\n        this._compression = compression;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    //todo missing\n    dataAxisLabel(label) {\n        if (!arguments.length) return this._dataAxisLabel;\n        this._dataAxisLabel = label;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tooltip(tooltip) {\n        if (!arguments.length) return this._tooltip;\n        this._tooltip = tooltip;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    forceY(force) {\n        if (!arguments.length) return this._forceY;\n        this._forceY = force;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n// todo missing\n    duration(duration) {\n        if (!arguments.length) return this._duration;\n        this._duration = duration;\n        return this;\n    }\n\n// todo missing\n    coarseness(coarseness) {\n        if (!arguments.length) return this._coarseness;\n        this._coarseness = coarseness;\n        return this;\n    }\n\n    // todo missing\n    padding(padding) {\n        if (!arguments.length) return this._padding;\n        this._padding = padding;\n        return this;\n    }\n\n    // todo missing\n    xAxisTooltips(tooltips) {\n        if (!arguments.length) return this._xAxisTooltips;\n        this._xAxisTooltips = tooltips;\n        return this;\n    }\n\n    xAxisOverride(override) {\n        if (!arguments.length) return this._xAxisOverride;\n        this._xAxisOverride = override;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    dispatch() {\n        return this._dispatch;\n    }\n\n    //------------------------------------------------------\n\n    render() {\n        if (!this._element) throw new Error("No element set for ColumnChart. See #element()");\n        if (!this._data) {\n            console.warn("No data set for ColumnChart. See #data()");\n            return;\n        }\n\n        const data = this.getTransformedData();\n        const keys = this.getKeys();\n\n        //------------------------------------------------\n        // Set up the SVG area\n\n        let topLevel = d3.select(this._element).select("svg");\n        if (topLevel.empty()) {\n            topLevel = d3.select(this._element).append("svg");\n        }\n\n        topLevel\n            .style("width", this._width + "px")\n            .style("height", this._height + "px");\n\n\n        // ---------------------------------\n        // Layout the showLegend.\n        //\n        // We do this now because we need to know how much space the legend\n        // takes up in order to finish calculating the margins.\n\n        const legendHeight = this.renderLegend();\n\n        //----------------------------------\n        // Calculate margins.\n\n        const margin = {top: 20, right: 20, bottom: 40, left: 40};\n        margin.bottom += legendHeight ? legendHeight + 20 : 0;\n\n        if (this._dataAxisLabel) margin.left += 20 + 12;\n        if (data) {\n            let maxLabelLength = 0;\n            data.forEach(d => {\n                d.data.forEach(d => {\n                    let length = this._xAxisTickFormat(this._x(d)).length;\n                    if (length > maxLabelLength) maxLabelLength = length;\n                })\n            });\n            margin.bottom += maxLabelLength * 2 + 10;    // space for axes labels.\n        }\n\n        const width = this._width - margin.left - margin.right,\n            height = this._height - margin.top - margin.bottom;\n\n        //----------------------------------\n        // Calculate scales and so on.\n\n\n        const x = d3.scaleTime()\n            .range([0, width]);\n\n        const y = d3.scaleLinear()\n            .range([height, 0])\n            .nice(5);\n        this._xscale = x;\n        this._yscale = y;\n\n        // Scale the range of the data in the domains\n\n        const allData = data.map(d => d.data).reduce((acc, val) => acc.concat(val));\n        x.domain(d3.extent(allData, d => d._x));\n        y.domain([Math.min(0, d3.min(allData, d => d._y)), d3.max(allData, d => d._y)]);\n\n        //------------------------------\n\n        let svg = topLevel.select(\'.main-group\');\n\n        if (svg.empty()) {\n            svg = topLevel\n                .append("g")\n                .attr("class", "main-group");\n        }\n\n        svg.attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n        //---------------------------------\n        // append the lines\n        let lineGroup = svg.select(".lines");\n        lineGroup.selectAll("circle").remove();\n\n        let circle = false;\n        let lastMouse = null;\n        let lastMin = null;\n\n        if (lineGroup.empty()) {\n            lineGroup = svg\n                .append("g")\n                .attr("class", "lines")\n\n            lineGroup\n                .append("rect")\n                .style("opacity", "0")\n                .attr("width", "100%")\n                .attr("height", "100%");\n        }\n\n        lineGroup\n            .on("mousemove", (d, i, nodes) => { // Darken the bar on mouse over\n                const mouse = d3.mouse(nodes[i]);\n\n                const xval = x.invert(mouse[0]);\n                const yval = y.invert(mouse[1]);\n                // let min = this.getClosestPoint(xval, yval, this.getTransformedData()[0].data);\n\n                let mins = data.map(d => this.getClosestPoint(xval, yval, d.data));\n                mins.forEach(d => d._dist =  [x(d._x), y(d._y)])\n\n                mins = mins.filter(min => {\n                    const minScreenDist = Math.sqrt((mouse[0] - min._dist[0]) ** 2 + (mouse[1] - min._dist[1]) ** 2);\n                    min._min_screen = minScreenDist;\n                    return minScreenDist < 100;\n                });\n\n\n                if (!mins || !mins.length) {\n                    lastMouse = null;\n                    lineGroup.selectAll("circle").remove();\n                    return;\n                }\n\n                mins = mins.sort((lhs, rhs) => lhs._min_screen - rhs._min_screen);\n                let min = mins[0];\n\n                if (circle) {\n                    if (lastMin && min._x.getTime() === lastMin._x.getTime()) return;\n                    lineGroup.selectAll("circle").remove();\n                }\n\n                circle = true;\n                lastMouse = mouse;\n                lastMin = min;\n                lineGroup\n                    .append("circle")\n                        .attr("cx", x(min._x))\n                        .attr("cy", y(min._y))\n                        .attr("r", 10)\n                        .attr("fill", this.getSeriesColour(min._s_i))\n                        .style("opacity", 0.1)\n                    .on("mouseover", () => {\n                        this._dispatch.call("tooltipShow", this, {\n                            e: d3.event,\n                            point: min,\n                            series: data[min._s_i],\n                            seriesIndex: min._s_i,\n                            value: min._y\n                        })\n                    })\n                    .on("mouseout", (d, i, nodes) => { // bar is regular colour on mouse out.\n                        this._dispatch.call("tooltipHide", this);\n                    })\n                    .transition()\n                        .style("opacity", 0.5)\n\n            });\n\n        let lines = lineGroup.selectAll(\'.line\');\n        lines = lines.data(data);\n\n        lines.exit().remove();\n\n        const line = d3.line()\n            .x(d => x(d._x))\n            .y(d => y(d._y));\n\n        lines\n            .enter()\n            .append("path")\n                .attr("class", "line")\n                .attr("fill", "none")\n                .attr("stroke", (d, i) => this.getSeriesColour(i))\n                .attr("stroke-linejoin", "round")\n                .attr("stroke-linecap", "round")\n                .attr("stroke-width", 1.5)\n                .style("opacity", 0)\n\n            // .transition()\n            // .duration(this._duration)\n                .style("opacity", 1)\n                .attr("d", d => line(d.data));\n\n        lines\n            // .transition()\n            .attr("d", d => line(d.data));\n\n\n        // Adding new groups, and hence adding new bars to those groups.\n        // groups.enter()\n        //     .append("g")\n        //     .attr("class", "group")\n        //     .attr("transform", d => "translate(" + x(d.key) + ",0)")\n        //     .attr("width", x.bandwidth())\n        //     .attr("height", "100%")\n        //     .merge(groups)\n        //     .interrupt("groups:move")\n        //     .transition("groups:move")\n        //     .attr("transform", d => "translate(" + x(d.key) + ",0)")\n        //     .attr("width", x.bandwidth())\n        //     .each((s_d, s_i, nodes) => {\n        //         let group = d3.select(nodes[s_i])\n        //\n        //         let bars = group.selectAll(".bar")\n        //             .data(s_d.data);\n        //\n        //         bars.exit().remove();\n        //\n        //         bars.interrupt("bar:move")     // Animate the bars to their new position.\n        //             .transition("bar:move")\n        //             .attr("width", xGroup.bandwidth())\n        //             .attr("x", d => xGroup(d._key))\n        //             .attr("y", 0);\n        //\n        //         bars.enter()\n        //             .append("rect")\n        //             .attr("class", (d, i) => "bar series series-" + i)\n        //             .attr("x", d => xGroup(d._key))\n        //             .attr("y", 0)\n        //             .attr("width", xGroup.bandwidth())\n        //             .attr("height", 0)\n        //             .style("fill", (d, i) => this.getSeriesColour(i))\n        //             .style("cursor", "pointer")\n        //             .on("mouseover", (d, i, nodes) => { // Darken the bar on mouse over\n        //                 d3.select(nodes[i])\n        //                     .interrupt("hover:colour")\n        //                     .transition("hover:colour")\n        //                     .duration(400)\n        //                     .style("fill", d3.hcl(this.getSeriesColour(i)).darker())\n        //                 this._dispatch.call("tooltipShow", this, {\n        //                     e: d3.event,\n        //                     point: d,\n        //                     series: s_d,\n        //                     seriesIndex: s_i,\n        //                     value: d._y\n        //                 })\n        //             })\n        //             .on("mouseout", (d, i, nodes) => { // bar is regular colour on mouse out.\n        //                 d3.select(nodes[i])\n        //                     .interrupt("hover:colour")\n        //                     .transition("hover:colour")\n        //                     .duration(400)\n        //                     .style("fill", this.getSeriesColour(i));\n        //                 this._dispatch.call("tooltipHide", this);\n        //             })\n        //             .on("click auxclick", (d, i, nodes) => {\n        //                 this._dispatch.call("elementClick", this, {\n        //                     e: d3.event,\n        //                     point: d,\n        //                     series: d._series,\n        //                     seriesIndex: s_i,\n        //                     value: this._y(d)\n        //                 })\n        //             })\n        //             .merge(bars)\n        //             .interrupt("bar:growth")    // Animate bars growing.\n        //             .transition("bar:growth")\n        //             .delay((d) => {\n        //                 return this.calcBarGrowth(s_i, nodes.length);\n        //             })\n        //             .duration(this._duration)\n        //             .style("fill", (d, i) => this.getSeriesColour(i))\n        //             .attr("height", d => height - y(d._y));\n        //\n        //     })\n\n        // ---------------------------------\n        // Labels loaded after our first bar grows.\n        // if (this._show_labels) {\n        //     svg.transition("bar:growth")\n        //         .on("end", (d, i, nodes) => {\n        //             if (i < nodes.length - 1) return;\n        //             this.renderLabels(svg, data, x, xGroup, y);\n        //         })\n        // }\n\n        // ---------------------------------\n        // Draw the y axis data label.\n\n        if (this._dataAxisLabel) {\n            this.renderDataAxisLabel(height, margin);\n        }\n\n        // ---------------------------------\n        // Set the background colour\n\n        d3.select(this._element).select(".background").remove();\n        if (this._backgroundColour) {\n            d3.select(this._element).select("svg")\n                .append("rect")\n                .attr("class", "background")\n                .attr("width", "100%")\n                .attr("height", "100%")\n                .style("fill", this._backgroundColour)\n                .lower();\n        }\n\n        //---------------------------------\n        // add the Y gridlines\n        svg.call(this.grid, width, d3.axisLeft(y).ticks(5));\n\n        //---------------------------------\n        // axes\n        svg.call(this.xaxis, height, d3.axisBottom(x).tickSize(0).tickPadding(5).tickFormat(this._xAxisTickFormat)); //); //\n        svg.call(this.yaxis, d3.axisLeft(y).ticks(5).tickFormat(this._tickFormat));\n    }\n\n    //------------------------------------------------------\n\n    /*\n     * Returns an object with two functions, #show() and #hide(),\n     * to show and hide the labels.\n     */\n    labels() {\n        return {\n\n            show: () => {\n                if (this._element) {\n                    let selection = this._element,\n                        data = this.getTransformedData(),\n                        xscale = this._xscale,\n                        xgroup = this._xgroupscale,\n                        yscale = this._yscale;\n\n                    if (selection) selection = d3.select(this._element).select("svg").select("g");\n                    if (!selection.empty() && data && xscale && yscale && xgroup) {\n                        let labels = selection.select(\'.chart-labels\');\n                        if (!labels.empty()) return;\n                        labels.remove()\n                        this.renderLabels(selection, data, xscale, xgroup, yscale, false);\n                    }\n                }\n\n            },\n\n            hide: () => {\n                if (this._element) {\n                    d3.select(this._element)\n                        .select(\'.chart-labels\')\n                        .interrupt("labels")\n                        .interrupt("labels:fade")\n                        .transition("labels:fade")\n                        .style("opacity", 0)\n                        .on("end", (d, i, nodes) => {\n                            d3.select(nodes[i]).remove();\n                        })\n                }\n            }\n        }\n    }\n\n    //------------------------------------------------------\n\n    renderLabels(selection, data, xscale, xgroup, yscale, animate) {\n        animate = animate === undefined ? true : animate;\n        selection.selectAll(".chart-labels").remove();\n\n        let labels = selection.append("g")\n            .attr("class", "chart-labels")\n            // .selectAll(".chart-label")\n            .selectAll(".label-group")\n            .data(data)\n\n        let maxWidth = 0;     // For calculating the max width of text.\n        let fontSize = 12;    // Our initial font size.\n        const buffer = 5;     // Buffer space between words and the top of a bar.\n        const calcDy = (ypos) => ypos < 10 ? fontSize + buffer : -buffer;\n\n        labels.enter().each((series, s_i, s_nodes) => {\n            let group = d3.select(s_nodes[s_i])\n                .append("g")\n                .attr("class", "label-group")\n                .attr("transform", d => "translate(" + xscale(d.key) + ",0)")\n                .selectAll(".chart-label")\n                .data(series.data)\n                .enter()\n                .each((d, i, nodes) => {\n\n                    // Want to figure out if the label is too dark / light for the\n                    // bar.\n                    let invertedColor = d3.hcl(this.getSeriesColour(i));\n                    invertedColor.l += Math.min(invertedColor.l + 50, 100);\n                    let invert = d3.hcl(this.getSeriesColour(i)).l < 60;\n\n                    let ypos = yscale(d._y);\n                    let dy = calcDy(ypos);\n                    let text = d3.select(nodes[i])\n                        .append("text")\n                        .text(this._labelFormat(d._y))\n                        .attr("class", "chart-label")\n                        .attr("y", ypos)\n                        .attr("dx", animate ? -15 : 0)\n                        .attr("dy", dy)\n                        .style("opacity", 0)\n                        .style("pointer-events", "none")\n                        // .style("font-family", "Open Sans, sans-serif")\n                        // .style("font-weight", "normal")\n                        // .style("font-size", fontSize + "px")\n                        .style("fill", dy > 0 && invert ? invertedColor.toString() : _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n                    // Set the x position, which is based on width.\n                    const width = text.node().getBBox().width;\n                    maxWidth = Math.max(width, maxWidth);\n                    text\n                        .attr("x", xgroup(d._key) + xgroup.bandwidth() / 2 - width / 2);\n\n                    text\n                        .transition("labels")\n                        .delay(() => animate ? this.calcBarGrowth(s_i, s_nodes.length) : 0) // Delay in lockstep with bar growth.\n                        .duration(this._duration)\n                        .attr("dx", 0)\n                        .style("opacity", 1)\n                })\n        })\n\n\n        // Figure out if we don\'t have enough space to show our labels.\n        // We then want to resize, if possible.\n        if (xgroup.bandwidth() < maxWidth * 1.05) {\n            let scale = maxWidth / xgroup.bandwidth() * 1.05;\n            fontSize = Math.floor(fontSize / scale);\n\n            if (fontSize < 8) {\n                // The labels are too small.\n                labels.enter().selectAll("text").remove();\n            } else {\n                labels.enter()\n                    .merge(labels)\n                    .selectAll("text")\n                    .style("font-size", fontSize + "px")\n                    .each((d, i, nodes) => {\n                        const text = d3.select(nodes[i]);\n                        const width = text.node().getBBox().width;\n                        text\n                            .attr("x", xgroup(d._key) + xgroup.bandwidth() / 2 - width / 2)\n                            .attr("dy", calcDy(d._y));\n                    })\n            }\n        }\n    }\n\n    //------------------------------------------------------\n\n    renderDataAxisLabel(height, margins) {\n        let svg = d3.select(this._element).select(\'svg\');\n        svg.selectAll(".data-labels").remove();\n\n        if (!this._dataAxisLabel) return;\n        let text = this._dataAxisLabel;\n        if (text.long) text = text.long;\n\n        let x = -(margins.top + height / 2);\n\n        let label = svg.append("g")\n            .attr("class", "data-labels")\n            .append("text")\n            .text(text)\n            .attr("transform", "rotate(-90 0,0) translate(" + x + ", 20)")\n            // .style("font-family", "Open Sans, sans-serif")\n            // .style("font-size", "12px")\n            // .style("font-style", "italic")\n            .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey);\n\n        let width = label.node().getBBox().width;\n        if (width >= height && this._dataAxisLabel.short) {\n            label.text(this._dataAxisLabel.short);\n            width = label.node().getBBox().width;\n        }\n\n        label.attr("dx", -width / 2);\n    }\n\n    //------------------------------------------------------\n\n    grid(selection, width, axis) {\n        selection.select(".grid").remove();\n\n        let grid = selection.append("g")\n            .attr("class", "grid")\n            .call(axis\n                .tickSize(-width)\n                .tickFormat("")\n            );\n\n        grid.selectAll("line")\n            .style("stroke", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.lightGrey);\n        grid.selectAll(".domain").remove();\n\n        grid\n            .lower() // Always ensure that this is earlier in the dom. Things must be drawn on top of it.\n            .style("opacity", 0)\n            .transition()\n            .delay(500)\n            .duration(500)\n            .style("opacity", 1);\n    }\n\n    //------------------------------------------------------\n\n    xaxis(selection, height, xaxis) {\n        selection.select(".x-axis").remove();\n        let axis = selection.append("g")\n            .attr("class", "x-axis")\n            .attr("transform", "translate(0," + height + ")")\n            .style("opacity", 0)\n            .call(xaxis);\n\n        axis.select(".domain").remove();\n\n        axis\n            .selectAll("text")\n            .style(\'text-anchor\', \'end\')\n            .attr(\'transform\', \'rotate(-30, 0,0)\');\n\n        axis\n            .transition()\n            .duration(1000)\n            .style("opacity", 1);\n    }\n\n    //------------------------------------------------------\n\n    yaxis(selection, axis) {\n        selection.select(".y-axis").remove();\n        let x = selection.append("g")\n            .attr("class", "y-axis")\n            .call(axis.tickSize(0).tickPadding(10))\n            .style("opacity", 0)\n            .transition()\n            .duration(1000)\n            .style("opacity", 1);\n\n        x.selectAll("text")\n            // .style("font-family", "Open Sans, sans-serif")\n            .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n    }\n\n    //------------------------------------------------------\n\n    calcBarGrowth(i, max) {\n        if (max < 10) return i * this._BAR_GROWTH / 2;\n        if (max < 35) return i * this._BAR_GROWTH / 4;\n        return 1;\n    }\n\n    getSeriesColour(i) {\n        if (i < 0 || !this._colours) return _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.midGrey;\n\n        i = i % this._colours.length;\n        return this._colours[i];\n    }\n\n    getSortedData() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        data = this._data.sort((lhs, rhs) => {\n            lhs = lhs.key.toLowerCase();\n            rhs = rhs.key.toLowerCase();\n\n            if (lhs === rhs) return 0;\n            if (lhs < rhs) return -1;\n            return 1;\n        });\n\n        return data;\n    }\n\n    getTransformedData() {\n        let data = this.getSortedData();\n        if (!data || !data.length) return [];\n\n        let results = [];\n\n        data.forEach((series, s_i) => {\n            let s = Object.assign({}, series);\n            results.push(s);\n\n            let data = [];\n            s.values.forEach((d) => {\n                data.push(Object.assign({\n                    _x: new Date(this._xAxisOverride ? this._xAxisOverride[this._x(d)] : this._x(d)),\n                    _series: series,\n                    _s_i: s_i,\n                    _key: series.key,\n                    _y: this._y(d)\n                }, d));\n            });\n\n            s.data = data;\n            delete s.values;\n        });\n\n        return results;\n    }\n\n    getKeys() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        return [...new Set(data.map(d => d.key))]\n    }\n\n    getClosestPoint(xval, yval, data) {\n        let calcDist = d => Math.sqrt(Math.abs(d._x - xval) ** 2 + (d._y - yval) ** 2);\n        let min = data[0];\n        let minDist = calcDist(min);\n\n        data.forEach(d => {\n            let dist = calcDist(d);\n            if (dist < minDist) {\n                minDist = dist;\n                min = d;\n            }\n        });\n\n        return min;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LineChart.js\n')},"./src/PieChart.js":
/*!*************************!*\
  !*** ./src/PieChart.js ***!
  \*************************/
/*! exports provided: PieChart */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PieChart", function() { return PieChart; });\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n/* harmony import */ var _Chart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chart */ "./src/Chart.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nclass PieChart extends _Chart__WEBPACK_IMPORTED_MODULE_1__["Chart"] {\n    constructor() {\n        super();\n        this._colours = ["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"];\n    }\n\n    //------------------------------------------------------\n\n    data(data) {\n        if (!arguments.length) return this._data;\n        if (data && data[0].key === undefined) {\n            data = [\n                {\n                    key: "series 1",\n                    values: data\n                }\n            ];\n        }\n        this._data = data;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    element(element) {\n        if (!arguments.length) return this._element;\n        this._element = element;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    showLabels(show) {\n        if (!arguments.length) return this._show_labels;\n        this._show_labels = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo dispatch\n    showLegend(show) {\n        if (!arguments.length) return this._show_legend;\n        this._show_legend = show;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    x(x) {\n        if (!arguments.length) return this._x;\n        this._x = x;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    y(y) {\n        if (!arguments.length) return this._y;\n        this._y = y;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    width(width) {\n        if (!arguments.length) return this._width;\n        this._width = width;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    height(height) {\n        if (!arguments.length) return this._height;\n        this._height = height;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    colours(colours) {\n        if (!arguments.length) return this._colours;\n        this._colours = colours;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    backgroundColour(colour) {\n        if (!arguments.length) return this._backgroundColour;\n        this._backgroundColour = colour || "#FFF"; // never set it to null.\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tickFormat(format) {\n        if (!arguments.length) return this._tickFormat;\n        this._tickFormat = format;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    xAxisTickFormat(format) {\n        if (!arguments.length) return this._xAxisTickFormat;\n        this._xAxisTickFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    labelFormat(format) {\n        if (!arguments.length) return this._labelFormat;\n        this._labelFormat = format || (d => d.toString());\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    // todo missing\n    labelCompression(compression) {\n        if (!arguments.length) return this._compression;\n        this._compression = compression;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    //todo missing\n    dataAxisLabel(label) {\n        if (!arguments.length) return this._dataAxisLabel;\n        this._dataAxisLabel = label;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    tooltip(tooltip) {\n        if (!arguments.length) return this._tooltip;\n        this._tooltip = tooltip;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    forceY(force) {\n        if (!arguments.length) return this._forceY;\n        this._forceY = force;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n// todo missing\n    duration(duration) {\n        if (!arguments.length) return this._duration;\n        this._duration = duration;\n        return this;\n    }\n\n// todo missing\n    coarseness(coarseness) {\n        if (!arguments.length) return this._coarseness;\n        this._coarseness = coarseness;\n        return this;\n    }\n\n    // todo missing\n    padding(padding) {\n        if (!arguments.length) return this._padding;\n        this._padding = padding;\n        return this;\n    }\n\n    // todo missing\n    xAxisTooltips(tooltips) {\n        if (!arguments.length) return this._xAxisTooltips;\n        this._xAxisTooltips = tooltips;\n        return this;\n    }\n\n    xAxisOverride(override) {\n        if (!arguments.length) return this._xAxisOverride;\n        this._xAxisOverride = override;\n        return this;\n    }\n\n    //------------------------------------------------------\n\n    dispatch() {\n        return this._dispatch;\n    }\n\n    //------------------------------------------------------\n\n    render() {\n        if (!this._element) throw new Error("No element set for ColumnChart. See #element()");\n        if (!this._data) {\n            console.warn("No data set for ColumnChart. See #data()");\n            return;\n        }\n\n        const data = this.getTransformedData();\n\n        //------------------------------------------------\n        // Set up the SVG area\n\n        let topLevel = d3.select(this._element).select("svg");\n        if (topLevel.empty()) topLevel = d3.select(this._element).append("svg");\n\n        topLevel\n            .style("width", this._width + "px")\n            .style("height", this._height + "px");\n\n        // ---------------------------------\n        // Layout the showLegend.\n        //\n        // We do this now because we need to know how much space the legend\n        // takes up in order to finish calculating the margins.\n\n        const legendHeight = this.renderLegend(topLevel, data, 0, this._width, this._height, d => d._key);\n\n        //----------------------------------\n        // Calculate margins.\n\n        const margin = {top: 20, right: 20, bottom: 40, left: 40};\n        margin.bottom += legendHeight ? legendHeight + 20 : 0;\n\n        // if (this._dataAxisLabel) margin.left += 20 + 12;\n        // if (data) {\n        //     let maxLabelLength = 0;\n        //     data.forEach(d => {\n        //         d.data.forEach(d => {\n        //             let length = this._xAxisTickFormat(this._x(d)).length;\n        //             if (length > maxLabelLength) maxLabelLength = length;\n        //         })\n        //     });\n        //     margin.bottom += maxLabelLength * 2 + 10;    // space for axes labels.\n        // }\n\n        const width = this._width - margin.left - margin.right,\n              height = this._height - margin.top - margin.bottom;\n        const radius = Math.min(width, height) / 2;\n        this._radius = radius;\n\n        //----------------------------------\n        // Calculate scales and so on.\n\n        let colour = d3.scaleOrdinal(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);\n\n        //------------------------------\n\n        let svg = topLevel.select(\'.main-group\');\n\n        if (svg.empty()) {\n            svg = topLevel\n                .append("g")\n                .attr("class", "main-group");\n        }\n\n        svg.attr("transform", "translate(" + (margin.left + width / 2) + "," + (margin.top + height / 2) + ")");\n\n        //---------------------------------\n        // Get rid of current labels.\n        svg.select(".chart-labels")\n            .remove();\n\n        //---------------------------------\n        // append the arcs for the pie chart\n\n        let pie = d3.pie()\n            .sort(null)\n            .value(d => d._y);\n        this._pie = pie;\n\n        let path = d3.arc()\n            .outerRadius(radius - 10)\n            .innerRadius(0);\n\n        let arcs = svg.select(".slices").selectAll(\'.arc\');\n\n        if (arcs.empty()) {\n            arcs = svg\n                .append("g")\n                .attr("class", "slices")\n                .selectAll(".arc");\n        }\n\n        let pieData = pie(data);\n        arcs = arcs.data(pieData);\n        arcs.exit().remove();\n\n        function arcTween(d, i) {\n            this._current = this._current || (i <= 0 ? { startAngle: 0, endAngle: 0} : pieData[i - 1]);\n            let interpolator = d3.interpolate(this._current, d);\n            this._current = interpolator(0);\n\n            return function(t) {\n                return path(interpolator(t))\n            }\n        }\n\n        arcs.enter()\n            .append("path")\n                .attr("class", (d, i) => "arc " + "series series-" + i)\n                .style("cursor", "pointer")\n            .on("mouseover", (d, i, nodes) => { // Darken the pie on mouse over\n                // We want to shift the pie out a bit on mouseover.\n                // So we want to find the direction to move the pie in.\n                // We can just ask the path helper to give us the centroid,\n                // normalise it, and that is the direction to move in.\n                const centre = path.centroid(d);\n                const norm = Math.sqrt(centre[0] ** 2 + centre[1] ** 2);\n                centre[0] = centre[0] / norm;\n                centre[1] = centre[1] / norm;\n\n                d3.select(nodes[i])\n                    .interrupt("hover:colour")\n                    .transition("hover:colour")\n                    .duration(300)\n                        .attr("transform", "translate(" + (centre[0] * 10) + "," + (centre[1] * 10) + "), scale(1.1)")\n                        .style("fill", d3.hcl(this.getSeriesColour(i)).darker());\n                this._dispatch.call("tooltipShow", this, {\n                    e: d3.event,\n                    point: d.data,\n                    series: d.data._series,\n                    seriesIndex: d.data._s_i,\n                    value: d.data._y\n                })\n            })\n            .on("mouseout", (d, i, nodes) => { // pie is regular colour on mouse out.\n                d3.select(nodes[i])\n                    .interrupt("hover:colour")\n                    .transition("hover:colour")\n                    .duration(300)\n                        .attr("transform", "translate(0,0)")\n                        .style("fill", this.getSeriesColour(i));\n                this._dispatch.call("tooltipHide", this);\n            })\n            .on("click auxclick", (d, i, nodes) => {\n                this._dispatch.call("elementClick", this, {\n                    e: d3.event,\n                    point: d.data,\n                    series: d.data._series,\n                    seriesIndex: d.data._s_i,\n                    value: d.data._y\n                })\n            })\n            .merge(arcs)\n            .transition()\n                .attrTween("d", arcTween)\n                .attr("fill", (d, i) => this.getSeriesColour(i) );\n\n        // arcs.append("text")\n        //     .attr("transform", function(d) { return "translate(" + label.centroid(d) + ")"; })\n        //     .attr("dy", "0.35em")\n        //     .text(d => {console.log("d is", d); return d.data._y; });\n\n\n        // ---------------------------------\n        // Labels loaded after our first bar grows.\n        if (this._show_labels) {\n            svg.transition("bar:growth")\n                .on("end", (d, i, nodes) => {\n                    if (i < nodes.length - 1) return;\n                    this.renderLabels(svg, data);\n                })\n        }\n\n        // ---------------------------------\n        // Set the background colour\n\n        d3.select(this._element).select(".background").remove();\n        if (this._backgroundColour) {\n            d3.select(this._element).select("svg")\n                .append("rect")\n                    .attr("class", "background")\n                    .attr("width", "100%")\n                    .attr("height", "100%")\n                    .style("fill", this._backgroundColour)\n                .lower();\n        }\n\n    }\n\n    //------------------------------------------------------\n\n    /*\n     * Returns an object with two functions, #show() and #hide(),\n     * to show and hide the labels.\n     */\n    labels() {\n        return {\n\n            show: () => {\n                if (this._element) {\n                    let selection = this._element,\n                        data = this.getTransformedData();\n\n                    if (selection) selection = d3.select(this._element).select("svg").select(".main-group");\n                    if (!selection.empty() && data) {\n                        let labels = selection.select(\'.chart-labels\');\n                        if (!labels.empty()) return;\n                        labels.remove();\n                        this.renderLabels(selection, data);\n                    }\n                }\n\n            },\n\n            hide: () => {\n                if (this._element) {\n                    d3.select(this._element)\n                        .select(\'.chart-labels\')\n                        .interrupt("labels")\n                        .interrupt("labels:fade")\n                        .transition("labels:fade")\n                        .style("opacity", 0)\n                        .on("end", (d, i, nodes) => {\n                            d3.select(nodes[i]).remove();\n                        })\n                }\n            }\n        }\n    }\n\n    //------------------------------------------------------\n\n    renderLabels(selection, data, animate) {\n        selection.selectAll(".chart-labels").remove();\n\n        const radius = this._radius + 15;\n\n        let arc = d3.arc()\n            .outerRadius(radius)\n            .innerRadius(radius);\n\n        let labels = selection.append("g")\n            .attr("class", "chart-labels")\n            .selectAll(".label-group")\n            .data(this._pie(data));\n\n        labels.enter()\n            .each((d, i, nodes) => {\n                const centroid = arc.centroid(d);\n                const radians = d.endAngle - d.startAngle;\n                const arcLength = radians * radius;\n\n                let label = d3.select(nodes[i])\n                    .append("text")\n                    .text(d => this._labelFormat(d.data._y))\n                        // .style("font-family", "Open Sans, sans-serif")\n                        // .style("font-size", "12px")\n                        .style("fill", _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.darkGrey)\n                        .style("opacity", 0)\n                        .attr("transform", "translate(" + centroid + ")");\n\n                const bounding = label.node().getBBox();\n                if (bounding.width < arcLength) {\n                    // label.attr("dx", (bounding.width / 2) * (direction[0] < 0 ? -1 : 1));\n                    // label.attr("dy", (bounding.height / 2) * (direction[1] < 0 ? -1 : 1));\n                    label.attr("dx", -(bounding.width / 2));\n                    label.attr("dy", (bounding.height / 2));\n\n                    label\n                        .transition()\n                        .duration(this._duration)\n                        .style("opacity", 1)\n                }\n\n            })\n    }\n\n    //------------------------------------------------------\n\n    getSeriesColour(i) {\n        if (i < 0 || !this._colours) return _Colours__WEBPACK_IMPORTED_MODULE_0__["colours"].eighteen.midGrey;\n\n        i = i % this._colours.length;\n        return this._colours[i];\n    }\n\n    getSortedData() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        data = this._data.sort((lhs, rhs) => {\n            lhs = lhs.key.toLowerCase();\n            rhs = rhs.key.toLowerCase();\n\n            if (lhs === rhs) return 0;\n            if (lhs < rhs) return -1;\n            return 1;\n        });\n\n        return data;\n    }\n\n    getTransformedData() {\n        let data = this.getSortedData();\n        if (!data || !data.length) return [];\n\n        let results = [];\n\n        let series = data[0];\n        series.values.forEach((d, d_i) => {\n\n            results.push(Object.assign({\n                _y: this._y(d),\n                _series_key: series.key,\n                _s_i: 0,\n                _series: series,\n                _key: this._xAxisOverride ? this._xAxisOverride[this._x(d)] : this._x(d)\n            }, d));\n        });\n\n        return results;\n    }\n\n    getKeys() {\n        let data = this._data;\n        if (!data || !data.length) return [];\n\n        return [...new Set(data.map(d => d.key))]\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/PieChart.js\n')},"./src/Points.js":
/*!***********************!*\
  !*** ./src/Points.js ***!
  \***********************/
/*! exports provided: points */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "points", function() { return points; });\n/* harmony import */ var _Geometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Geometry */ "./src/Geometry.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nclass Point extends _Geometry__WEBPACK_IMPORTED_MODULE_0__["Geometry"] {\n\n    constructor() {\n        super("POINT", 3);\n    }\n\n    render() {\n        console.log("\\tRendering POINTS");\n\n        const element = this._element;\n        const data = this.prepareData();\n        const width = this._width,\n              height = this._height;\n\n        element.classed("points", true);\n\n\n        const x = this.getD3XScale(data, width);\n        const y = this.getD3YScale(data, height);\n\n        const colours = d3.scaleOrdinal(this.colourScale())\n                          .domain(this.getColourDomain(data));\n\n        let groups = element.selectAll(\'.point-groups\');\n        groups = groups.data(data);\n\n        groups.exit().remove();\n\n        groups.enter()\n              .append("g")\n              .attr("class", "point-groups")\n              .merge(groups.selectAll(".point-groups"))\n              .each((d, i, nodes) => {\n                  const group = d3.select(nodes[i]);\n                  const points = group.selectAll(".point")\n                      .data(d.data);\n\n                  points.enter()\n                      .append("circle")\n                          .style("opacity", 0.4)\n                          .attr("cx", d => x(d._x))\n                          .attr("cy", d => y(d._y))\n                          .attr("fill", d => colours(d._colour))\n                          .attr("r", 5);\n              });\n    }\n\n    getD3XScale(data, width) {\n        width = width || this.width();\n        data = data || this.prepareData()\n        return d3.scaleLinear()\n                 .rangeRound([0, width])\n                 .domain([Math.min(0, d3.min(data, d => d3.min(d.data, d => d._x))),\n                     d3.max(data, d => d3.max(d.data, d => d._x))]);\n\n    }\n\n    getD3YScale(data, height) {\n        data = data || this.prepareData();\n        height = height || this.height();\n\n        return d3.scaleLinear()\n                 .rangeRound([height, 0])\n                 .nice()\n                 .domain([Math.min(0, d3.min(data, d => d3.min(d.data, d => d._y))),\n                     d3.max(data, d => d3.max(d.data, d => d._y))]);\n\n    }\n}\n\n\nfunction points() {\n    return new Point();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvUG9pbnRzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYjNqcy8uL3NyYy9Qb2ludHMuanM/MGJjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKEMpIDIwMTMtMjAxNCwgMjAxOCBCcmFuZHNFeWUgKFBUWSkgTFREXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4vLyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcbi8vIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSxcbi8vICAgICBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4vLyBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuLy8gY29uZGl0aW9uczpcbi8vXG4vLyAgICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vICAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsXG4vLyAgICAgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRlxuLy8gQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFXG4vLyBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuL0dlb21ldHJ5JztcblxuXG5jbGFzcyBQb2ludCBleHRlbmRzIEdlb21ldHJ5IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIlBPSU5UXCIsIDMpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJcXHRSZW5kZXJpbmcgUE9JTlRTXCIpO1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9lbGVtZW50O1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5wcmVwYXJlRGF0YSgpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX3dpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLl9oZWlnaHQ7XG5cbiAgICAgICAgZWxlbWVudC5jbGFzc2VkKFwicG9pbnRzXCIsIHRydWUpO1xuXG5cbiAgICAgICAgY29uc3QgeCA9IHRoaXMuZ2V0RDNYU2NhbGUoZGF0YSwgd2lkdGgpO1xuICAgICAgICBjb25zdCB5ID0gdGhpcy5nZXREM1lTY2FsZShkYXRhLCBoZWlnaHQpO1xuXG4gICAgICAgIGNvbnN0IGNvbG91cnMgPSBkMy5zY2FsZU9yZGluYWwodGhpcy5jb2xvdXJTY2FsZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMuZ2V0Q29sb3VyRG9tYWluKGRhdGEpKTtcblxuICAgICAgICBsZXQgZ3JvdXBzID0gZWxlbWVudC5zZWxlY3RBbGwoJy5wb2ludC1ncm91cHMnKTtcbiAgICAgICAgZ3JvdXBzID0gZ3JvdXBzLmRhdGEoZGF0YSk7XG5cbiAgICAgICAgZ3JvdXBzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICBncm91cHMuZW50ZXIoKVxuICAgICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwicG9pbnQtZ3JvdXBzXCIpXG4gICAgICAgICAgICAgIC5tZXJnZShncm91cHMuc2VsZWN0QWxsKFwiLnBvaW50LWdyb3Vwc1wiKSlcbiAgICAgICAgICAgICAgLmVhY2goKGQsIGksIG5vZGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBncm91cCA9IGQzLnNlbGVjdChub2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBwb2ludHMgPSBncm91cC5zZWxlY3RBbGwoXCIucG9pbnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAuZGF0YShkLmRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICBwb2ludHMuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZCA9PiB4KGQuX3gpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGQgPT4geShkLl95KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGQgPT4gY29sb3VycyhkLl9jb2xvdXIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgNSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEQzWFNjYWxlKGRhdGEsIHdpZHRoKSB7XG4gICAgICAgIHdpZHRoID0gd2lkdGggfHwgdGhpcy53aWR0aCgpO1xuICAgICAgICBkYXRhID0gZGF0YSB8fCB0aGlzLnByZXBhcmVEYXRhKClcbiAgICAgICAgcmV0dXJuIGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAgLmRvbWFpbihbTWF0aC5taW4oMCwgZDMubWluKGRhdGEsIGQgPT4gZDMubWluKGQuZGF0YSwgZCA9PiBkLl94KSkpLFxuICAgICAgICAgICAgICAgICAgICAgZDMubWF4KGRhdGEsIGQgPT4gZDMubWF4KGQuZGF0YSwgZCA9PiBkLl94KSldKTtcblxuICAgIH1cblxuICAgIGdldEQzWVNjYWxlKGRhdGEsIGhlaWdodCkge1xuICAgICAgICBkYXRhID0gZGF0YSB8fCB0aGlzLnByZXBhcmVEYXRhKCk7XG4gICAgICAgIGhlaWdodCA9IGhlaWdodCB8fCB0aGlzLmhlaWdodCgpO1xuXG4gICAgICAgIHJldHVybiBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFtoZWlnaHQsIDBdKVxuICAgICAgICAgICAgICAgICAubmljZSgpXG4gICAgICAgICAgICAgICAgIC5kb21haW4oW01hdGgubWluKDAsIGQzLm1pbihkYXRhLCBkID0+IGQzLm1pbihkLmRhdGEsIGQgPT4gZC5feSkpKSxcbiAgICAgICAgICAgICAgICAgICAgIGQzLm1heChkYXRhLCBkID0+IGQzLm1heChkLmRhdGEsIGQgPT4gZC5feSkpXSk7XG5cbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50cygpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KCk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Points.js\n')},"./src/Scales.js":
/*!***********************!*\
  !*** ./src/Scales.js ***!
  \***********************/
/*! exports provided: scaleTime, scaleIdentity */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleTime", function() { return scaleTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleIdentity", function() { return scaleIdentity; });\n/* harmony import */ var _Bucket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bucket */ "./src/Bucket.js");\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nclass ScaleTime {\n    transform(val) {\n        if (val instanceof Date) return val;\n        if (typeof val !== \'string\') throw new Error("Value is not a string and cannot be converted to a date");\n        return new Date(val);\n    }\n\n    buckets(data) {\n        return new _Bucket__WEBPACK_IMPORTED_MODULE_0__["DateBucket"](data);\n    }\n}\n\nclass ScaleIdentity {\n    transform(val) {\n        return val;\n    }\n\n    buckets(data) {\n        return new _Bucket__WEBPACK_IMPORTED_MODULE_0__["ContinuousBucket"](data);\n    }\n}\n\n\nfunction scaleTime() {\n    return new ScaleTime();\n}\n\nfunction scaleIdentity() {\n    return new ScaleIdentity();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU2NhbGVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYjNqcy8uL3NyYy9TY2FsZXMuanM/ZmRlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKEMpIDIwMTMtMjAxNCwgMjAxOCBCcmFuZHNFeWUgKFBUWSkgTFREXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzXG4vLyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmVcbi8vIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSxcbi8vICAgICBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4vLyBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuLy8gY29uZGl0aW9uczpcbi8vXG4vLyAgICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vICAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsXG4vLyAgICAgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEFcbi8vIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbi8vIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRlxuLy8gQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFXG4vLyBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtEYXRlQnVja2V0LCBDb250aW51b3VzQnVja2V0fSBmcm9tIFwiLi9CdWNrZXRcIjtcblxuXG5jbGFzcyBTY2FsZVRpbWUge1xuICAgIHRyYW5zZm9ybSh2YWwpIHtcbiAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB2YWw7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgaXMgbm90IGEgc3RyaW5nIGFuZCBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgZGF0ZVwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbCk7XG4gICAgfVxuXG4gICAgYnVja2V0cyhkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZUJ1Y2tldChkYXRhKTtcbiAgICB9XG59XG5cbmNsYXNzIFNjYWxlSWRlbnRpdHkge1xuICAgIHRyYW5zZm9ybSh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBidWNrZXRzKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250aW51b3VzQnVja2V0KGRhdGEpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVUaW1lKCkge1xuICAgIHJldHVybiBuZXcgU2NhbGVUaW1lKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUlkZW50aXR5KCkge1xuICAgIHJldHVybiBuZXcgU2NhbGVJZGVudGl0eSgpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/Scales.js\n')},"./src/Statistics.js":
/*!***************************!*\
  !*** ./src/Statistics.js ***!
  \***************************/
/*! exports provided: freedmanDiaconis */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "freedmanDiaconis", function() { return freedmanDiaconis; });\n/* harmony import */ var compute_iqr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! compute-iqr */ "./node_modules/compute-iqr/lib/index.js");\n/* harmony import */ var compute_iqr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(compute_iqr__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n/**\n * Calculates the number of buckets to split a real value domain\n * in to when calculating a histogram.\n *\n * https://en.wikipedia.org/wiki/Histogram\n *\n * @return {number}\n */\nfunction freedmanDiaconis(data) {\n    return 2 * compute_iqr__WEBPACK_IMPORTED_MODULE_0___default()(data) / Math.pow(data.length, 1/3);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU3RhdGlzdGljcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2IzanMvLi9zcmMvU3RhdGlzdGljcy5qcz9kNThlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoQykgMjAxMy0yMDE0LCAyMDE4IEJyYW5kc0V5ZSAoUFRZKSBMVERcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbi8vIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuLy8gd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuLy8gICAgIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbi8vIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4vLyBjb25kaXRpb25zOlxuLy9cbi8vICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vICAgICBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GXG4vLyBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkVcbi8vIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgaXFyIGZyb20gJ2NvbXB1dGUtaXFyJztcblxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBidWNrZXRzIHRvIHNwbGl0IGEgcmVhbCB2YWx1ZSBkb21haW5cbiAqIGluIHRvIHdoZW4gY2FsY3VsYXRpbmcgYSBoaXN0b2dyYW0uXG4gKlxuICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGlzdG9ncmFtXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJlZWRtYW5EaWFjb25pcyhkYXRhKSB7XG4gICAgcmV0dXJuIDIgKiBpcXIoZGF0YSkgLyBNYXRoLnBvdyhkYXRhLmxlbmd0aCwgMS8zKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Statistics.js\n')},"./src/helpers.js":
/*!************************!*\
  !*** ./src/helpers.js ***!
  \************************/
/*! exports provided: maxBounding */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxBounding", function() { return maxBounding; });\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n/**\n * Given an array of text, this places things in the DOM to figure out how\n * much pixel space the text takes up.\n */\nfunction maxBounding(selection, text, font, fontSize) {\n    // font = font || "Open Sans, sans-serif";\n    // fontSize = fontSize || "12";\n\n    let width = 0;\n    let height = 0;\n    selection.append("g")\n            .attr("class", "text-size")\n            .style("opacity", 0)\n            .attr("transform", "translate(-100, -100)")\n        .selectAll(".text-measurement")\n        .data(text)\n        .enter()\n        .append("text")\n        .text(d => d)\n        .each((d, i, nodes) => {\n            let node = nodes[i];\n            let bb = node.getBBox();\n            width = Math.max(width, bb.width);\n            height = Math.max(height, bb.height)\n        });\n\n    selection.select(".text-size").remove();\n    return {\n        width: width,\n        height: height\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaGVscGVycy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2IzanMvLi9zcmMvaGVscGVycy5qcz9kN2MyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoQykgMjAxMy0yMDE0LCAyMDE4IEJyYW5kc0V5ZSAoUFRZKSBMVERcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXNcbi8vIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZVxuLy8gd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LFxuLy8gICAgIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbi8vIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4vLyBjb25kaXRpb25zOlxuLy9cbi8vICAgICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCxcbi8vICAgICBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQVxuLy8gUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GXG4vLyBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkVcbi8vIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2YgdGV4dCwgdGhpcyBwbGFjZXMgdGhpbmdzIGluIHRoZSBET00gdG8gZmlndXJlIG91dCBob3dcbiAqIG11Y2ggcGl4ZWwgc3BhY2UgdGhlIHRleHQgdGFrZXMgdXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXhCb3VuZGluZyhzZWxlY3Rpb24sIHRleHQsIGZvbnQsIGZvbnRTaXplKSB7XG4gICAgLy8gZm9udCA9IGZvbnQgfHwgXCJPcGVuIFNhbnMsIHNhbnMtc2VyaWZcIjtcbiAgICAvLyBmb250U2l6ZSA9IGZvbnRTaXplIHx8IFwiMTJcIjtcblxuICAgIGxldCB3aWR0aCA9IDA7XG4gICAgbGV0IGhlaWdodCA9IDA7XG4gICAgc2VsZWN0aW9uLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0ZXh0LXNpemVcIilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKC0xMDAsIC0xMDApXCIpXG4gICAgICAgIC5zZWxlY3RBbGwoXCIudGV4dC1tZWFzdXJlbWVudFwiKVxuICAgICAgICAuZGF0YSh0ZXh0KVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAudGV4dChkID0+IGQpXG4gICAgICAgIC5lYWNoKChkLCBpLCBub2RlcykgPT4ge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGxldCBiYiA9IG5vZGUuZ2V0QkJveCgpO1xuICAgICAgICAgICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgYmIud2lkdGgpO1xuICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0LCBiYi5oZWlnaHQpXG4gICAgICAgIH0pO1xuXG4gICAgc2VsZWN0aW9uLnNlbGVjdChcIi50ZXh0LXNpemVcIikucmVtb3ZlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgIH1cbn1cblxuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/helpers.js\n')},"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: ColumnChart, BarChart, PieChart, LineChart, colours, chart, histogram, line, points, scaleTime */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ColumnChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ColumnChart */ "./src/ColumnChart.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColumnChart", function() { return _ColumnChart__WEBPACK_IMPORTED_MODULE_0__["ColumnChart"]; });\n\n/* harmony import */ var _BarChart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BarChart */ "./src/BarChart.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BarChart", function() { return _BarChart__WEBPACK_IMPORTED_MODULE_1__["BarChart"]; });\n\n/* harmony import */ var _PieChart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PieChart */ "./src/PieChart.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PieChart", function() { return _PieChart__WEBPACK_IMPORTED_MODULE_2__["PieChart"]; });\n\n/* harmony import */ var _LineChart__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LineChart */ "./src/LineChart.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LineChart", function() { return _LineChart__WEBPACK_IMPORTED_MODULE_3__["LineChart"]; });\n\n/* harmony import */ var _Colours__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Colours */ "./src/Colours.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "colours", function() { return _Colours__WEBPACK_IMPORTED_MODULE_4__["colours"]; });\n\n/* harmony import */ var _FantasticChart__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./FantasticChart */ "./src/FantasticChart.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "chart", function() { return _FantasticChart__WEBPACK_IMPORTED_MODULE_5__["chart"]; });\n\n/* harmony import */ var _Histogram__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Histogram */ "./src/Histogram.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "histogram", function() { return _Histogram__WEBPACK_IMPORTED_MODULE_6__["histogram"]; });\n\n/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Line */ "./src/Line.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "line", function() { return _Line__WEBPACK_IMPORTED_MODULE_7__["line"]; });\n\n/* harmony import */ var _Points__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Points */ "./src/Points.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "points", function() { return _Points__WEBPACK_IMPORTED_MODULE_8__["points"]; });\n\n/* harmony import */ var _Scales__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Scales */ "./src/Scales.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scaleTime", function() { return _Scales__WEBPACK_IMPORTED_MODULE_9__["scaleTime"]; });\n\n// Copyright (C) 2013-2014, 2018 BrandsEye (PTY) LTD\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files (the "Software"), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n//     merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n//     The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n//     INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n// For the Fantastic Chart\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iM2pzLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChDKSAyMDEzLTIwMTQsIDIwMTggQnJhbmRzRXllIChQVFkpIExURFxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpc1xuLy8gc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlXG4vLyB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG4vLyAgICAgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuLy8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbi8vIGNvbmRpdGlvbnM6XG4vL1xuLy8gICAgIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyAgICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELFxuLy8gICAgIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBXG4vLyBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4vLyBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0Zcbi8vIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRVxuLy8gT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmV4cG9ydCB7IENvbHVtbkNoYXJ0IGFzIENvbHVtbkNoYXJ0IH0gZnJvbSAnLi9Db2x1bW5DaGFydCc7XG5leHBvcnQgeyBCYXJDaGFydCBhcyBCYXJDaGFydCB9IGZyb20gJy4vQmFyQ2hhcnQnO1xuZXhwb3J0IHsgUGllQ2hhcnQgYXMgUGllQ2hhcnQgfSBmcm9tICcuL1BpZUNoYXJ0JztcbmV4cG9ydCB7IExpbmVDaGFydCBhcyBMaW5lQ2hhcnQgfSBmcm9tICcuL0xpbmVDaGFydCc7XG5leHBvcnQgeyBjb2xvdXJzIH0gZnJvbSAnLi9Db2xvdXJzJztcblxuLy8gRm9yIHRoZSBGYW50YXN0aWMgQ2hhcnRcbmV4cG9ydCB7IGNoYXJ0IH0gZnJvbSAnLi9GYW50YXN0aWNDaGFydCc7XG5leHBvcnQgeyBoaXN0b2dyYW0gfSBmcm9tICcuL0hpc3RvZ3JhbSc7XG5leHBvcnQgeyBsaW5lIH0gZnJvbSAnLi9MaW5lJztcbmV4cG9ydCB7IHBvaW50cyB9IGZyb20gJy4vUG9pbnRzJztcbmV4cG9ydCB7IHNjYWxlVGltZSB9IGZyb20gJy4vU2NhbGVzJzsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n')}});